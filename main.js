/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function getActiveView(app) {
    const activeView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    return activeView !== null && activeView !== void 0 ? activeView : undefined;
}
function isViewActive(app) {
    const activeView = getActiveView(app);
    if (activeView && activeView.file)
        return true;
    return false;
}
function getViewMetadata(app) {
    const activeView = getActiveView(app);
    if (activeView && activeView.file) {
        const data = app.metadataCache.getFileCache(activeView.file) || {};
        return data;
    }
    return undefined;
}
function getViewInfo(app) {
    const activeView = getActiveView(app);
    const data = getViewMetadata(app);
    const editor = activeView ? activeView.editor : undefined;
    if (activeView && data && editor) {
        return {
            activeView, data, editor
        };
    }
    return undefined;
}

// Validates the string using a regex to ensure is is a valid arabic numbering value
function isValidArabicNumberingValueString(s) {
    const regex = /^[0-9]+$/;
    return regex.test(s);
}
// Validates the string using a regex to ensure is is a valid alphabet numbering value
function isValidAlphabetNumberingValueString(s) {
    const regex = /^[A-Z]$/;
    return regex.test(s);
}
function printableNumberingToken(t) {
    switch (t.style) {
        case '1':
            return t.value.toString();
        case 'A':
            return t.value;
    }
}
function zerothNumberingTokenInStyle(style) {
    switch (style) {
        case '1':
            return { style: '1', value: 0 };
        case 'A':
            return { style: 'A', value: 'Z' };
    }
}
function firstNumberingTokenInStyle(style) {
    switch (style) {
        case '1':
            return { style: '1', value: 1 };
        case 'A':
            return { style: 'A', value: 'A' };
    }
}
function nextNumberingToken(t) {
    switch (t.style) {
        case '1':
            return { style: '1', value: t.value + 1 };
        case 'A':
            if (t.value === 'Z')
                return { style: 'A', value: 'A' };
            else
                return { style: 'A', value: String.fromCharCode(t.value.charCodeAt(0) + 1) };
    }
}
function previousNumberingToken(t) {
    switch (t.style) {
        case '1':
            return { style: '1', value: t.value - 1 };
        case 'A':
            if (t.value === 'A')
                return { style: 'A', value: 'Z' };
            else
                return { style: 'A', value: String.fromCharCode(t.value.charCodeAt(0) - 1) };
    }
}
function makeNumberingString(numberingStack) {
    let numberingString = '';
    for (let i = 0; i < numberingStack.length; i++) {
        if (i === 0) {
            numberingString += ' ';
        }
        else {
            numberingString += '.';
        }
        numberingString += printableNumberingToken(numberingStack[i]);
    }
    return numberingString;
}
function startAtOrZerothInStyle(startAtSettingString, style) {
    if (startAtSettingString === '')
        return zerothNumberingTokenInStyle(style);
    let firstNumberingTokenFromSetting;
    switch (style) {
        case '1':
            if (!isValidArabicNumberingValueString(startAtSettingString))
                return zerothNumberingTokenInStyle(style);
            firstNumberingTokenFromSetting = { style: '1', value: parseInt(startAtSettingString) };
            break;
        case 'A':
            if (!isValidAlphabetNumberingValueString(startAtSettingString))
                return zerothNumberingTokenInStyle(style);
            firstNumberingTokenFromSetting = { style: 'A', value: startAtSettingString };
            break;
    }
    // Convert the first numbering token to a zeroth numbering token
    return previousNumberingToken(firstNumberingTokenFromSetting);
}

const DEFAULT_SETTINGS = {
    skipTopLevel: false,
    firstLevel: 1,
    maxLevel: 6,
    styleLevel1: '1',
    styleLevelOther: '1',
    auto: false,
    separator: '',
    contents: '',
    startAt: ''
};
function isValidNumberingStyleString(s) {
    if (s === 'A' || s === '1')
        return true;
    return false;
}
function isValidNumberingValueString(s) {
    if (s === '' || isValidArabicNumberingValueString(s) || isValidAlphabetNumberingValueString(s))
        return true;
    return false;
}
function isValidFlag(f) {
    if (f === true || f === false)
        return true;
    return false;
}
function isValidFirstOrMaxLevel(x) {
    if (typeof x === 'number' && x >= 1 && x <= 6)
        return true;
    return false;
}
function isValidSeparator(x) {
    if (typeof x === 'string' && (x === '' || x === ':' || x === '.' || x === '-' || x === '—' /* em-dash */ || x === ' :' || x === ' .' || x === ' -' || x === ' —' /* em-dash */))
        return true;
    return false;
}
function isValidContents(x) {
    if (typeof x === 'string' && (x === '' || x.startsWith('^')))
        return true;
    return false;
}
function doesContentsHaveValue(x) {
    if (x.length > 2 && x.startsWith('^'))
        return true;
    return false;
}

function findRangeInHeaderString(lineText, lineNumber) {
    // Regex to match the heading prefix, including the space after the hash(es), but not the heading text
    const regex = /^\s{0,4}#+( )?([0-9]+\.|[A-Z]\.)*([0-9]+|[A-Z])?( )?[—:.-]?( )+/g;
    if (!lineText)
        return undefined;
    const matches = lineText.match(regex);
    if (matches && matches.length !== 1) {
        // eslint-disable-next-line no-console
        console.log("Unexpected heading format: '" + lineText + "'");
        return undefined;
    }
    const match = matches ? matches[0] : '';
    const from = {
        line: lineNumber,
        ch: 0
    };
    const to = {
        line: lineNumber,
        ch: match.length
    };
    return { from, to };
}
function updateSettingsFromFrontMatterFormatPart(part, settings) {
    // Parse the separator
    let partWithoutSeparator = part;
    const potentialTwoCharSeparator = part.slice(-2);
    if (isValidSeparator(potentialTwoCharSeparator)) {
        settings.separator = potentialTwoCharSeparator;
        partWithoutSeparator = part.slice(0, -2);
    }
    else {
        const potentialOneCharSeparator = part.slice(-1);
        if (isValidSeparator(potentialOneCharSeparator)) {
            settings.separator = potentialOneCharSeparator;
            partWithoutSeparator = part.slice(0, -1);
        }
        else {
            settings.separator = '';
        }
    }
    // Parse the numbering style
    const descriptors = partWithoutSeparator.split('.');
    let firstNumberedDescriptor = 0;
    // Handle the case where the first descriptor is an underscore
    if (descriptors.length > 1 && descriptors[0] === '_') {
        // The first descriptor is an instruction to skip top levels, so skip them
        settings.skipTopLevel = true;
        firstNumberedDescriptor = 1;
    }
    else {
        settings.skipTopLevel = false;
    }
    if (descriptors.length - firstNumberedDescriptor >= 2) {
        const styleLevel1 = descriptors[firstNumberedDescriptor];
        if (isValidNumberingStyleString(styleLevel1)) {
            settings.styleLevel1 = styleLevel1;
        }
        const styleLevelOther = descriptors[firstNumberedDescriptor + 1];
        if (isValidNumberingStyleString(styleLevelOther)) {
            settings.styleLevelOther = styleLevelOther;
        }
    }
    return settings;
}

const AUTO_PART_KEY = 'auto';
const FIRST_LEVEL_PART_KEY = 'first-level';
const MAX_LEVEL_PART_KEY = 'max';
const CONTENTS_PART_KEY = 'contents';
const START_AT_PART_KEY = 'start-at';
function parseCompactFrontMatterSettings(fm) {
    const entry = obsidian.parseFrontMatterEntry(fm, 'number headings');
    if (entry) {
        const entryString = String(entry);
        const parts = entryString.split(',');
        let settings = Object.assign({}, DEFAULT_SETTINGS);
        for (const part of parts) {
            const trimmedPart = part.trim();
            if (trimmedPart.length === 0)
                continue;
            if (trimmedPart === AUTO_PART_KEY) {
                // Parse auto numbering part
                settings.auto = true;
            }
            else if (trimmedPart.startsWith(FIRST_LEVEL_PART_KEY)) {
                // Parse first level part
                const nstring = trimmedPart.substring(FIRST_LEVEL_PART_KEY.length + 1);
                const n = parseInt(nstring);
                if (isValidFirstOrMaxLevel(n)) {
                    settings.firstLevel = n;
                }
            }
            else if (trimmedPart.startsWith(MAX_LEVEL_PART_KEY)) {
                // Parse max level part
                const nstring = trimmedPart.substring(MAX_LEVEL_PART_KEY.length + 1);
                const n = parseInt(nstring);
                if (isValidFirstOrMaxLevel(n)) {
                    settings.maxLevel = n;
                }
            }
            else if (trimmedPart.startsWith(START_AT_PART_KEY)) {
                // Parse "start at" part
                const value = trimmedPart.substring(START_AT_PART_KEY.length + 1);
                if (isValidNumberingValueString(value)) {
                    settings.startAt = value;
                }
            }
            else if (trimmedPart.startsWith(CONTENTS_PART_KEY)) {
                if (trimmedPart.length <= CONTENTS_PART_KEY.length + 1)
                    continue;
                // Parse contents heading part
                const tocHeading = trimmedPart.substring(CONTENTS_PART_KEY.length + 1);
                if (isValidContents(tocHeading)) {
                    settings.contents = tocHeading;
                }
            }
            else {
                // Parse formatting part
                settings = updateSettingsFromFrontMatterFormatPart(trimmedPart, settings);
            }
        }
        return settings;
    }
    return undefined;
}
const getFrontMatterSettingsOrAlternative = ({ frontmatter }, alternativeSettings) => {
    var _a, _b, _c, _d, _e;
    if (frontmatter !== undefined) {
        const decompactedSettings = parseCompactFrontMatterSettings(frontmatter);
        if (decompactedSettings !== undefined)
            return decompactedSettings;
        // NOTE: Everything below is for backwards compatibility only
        const skipTopLevelEntry = (_a = obsidian.parseFrontMatterEntry(frontmatter, 'number-headings-skip-top-level')) !== null && _a !== void 0 ? _a : obsidian.parseFrontMatterEntry(frontmatter, 'header-numbering-skip-top-level');
        const skipTopLevel = isValidFlag(skipTopLevelEntry) ? skipTopLevelEntry : alternativeSettings.skipTopLevel;
        const maxLevelEntry = (_b = obsidian.parseFrontMatterEntry(frontmatter, 'number-headings-max-level')) !== null && _b !== void 0 ? _b : obsidian.parseFrontMatterEntry(frontmatter, 'header-numbering-max-level');
        const maxLevel = isValidFirstOrMaxLevel(maxLevelEntry) ? maxLevelEntry : alternativeSettings.maxLevel;
        const styleLevel1Entry = String((_c = obsidian.parseFrontMatterEntry(frontmatter, 'number-headings-style-level-1')) !== null && _c !== void 0 ? _c : obsidian.parseFrontMatterEntry(frontmatter, 'header-numbering-style-level-1'));
        const styleLevel1 = isValidNumberingStyleString(styleLevel1Entry) ? styleLevel1Entry : alternativeSettings.styleLevel1;
        const styleLevelOtherEntry = String((_d = obsidian.parseFrontMatterEntry(frontmatter, 'number-headings-style-level-other')) !== null && _d !== void 0 ? _d : obsidian.parseFrontMatterEntry(frontmatter, 'header-numbering-style-level-other'));
        const styleLevelOther = isValidNumberingStyleString(styleLevelOtherEntry) ? styleLevelOtherEntry : alternativeSettings.styleLevelOther;
        const autoEntry = (_e = obsidian.parseFrontMatterEntry(frontmatter, 'number-headings-auto')) !== null && _e !== void 0 ? _e : obsidian.parseFrontMatterEntry(frontmatter, 'header-numbering-auto');
        const auto = isValidFlag(autoEntry) ? autoEntry : alternativeSettings.auto;
        return Object.assign(Object.assign({}, alternativeSettings), { skipTopLevel, maxLevel, styleLevel1, styleLevelOther, auto });
    }
    else {
        return alternativeSettings;
    }
};
function settingsToCompactFrontMatterValue(settings) {
    const autoPart = settings.auto ? 'auto, ' : '';
    const firstLevelPart = `first-level ${settings.firstLevel}, `;
    const maxPart = `max ${settings.maxLevel}, `;
    const contentsPart = settings.contents && settings.contents.length > 0 ? `contents ${settings.contents}, ` : '';
    const skipTopLevelString = settings.skipTopLevel ? '_.' : '';
    const stylePart = `${skipTopLevelString}${settings.styleLevel1}.${settings.styleLevelOther}${settings.separator}`;
    const startAtPart = settings.startAt !== '' ? `start-at ${settings.startAt}, ` : '';
    return autoPart + firstLevelPart + maxPart + contentsPart + startAtPart + stylePart;
}
function findLineWhichStartsWith(editor, search, afterLine) {
    // Find the location of the frontmatter
    for (let i = afterLine; i < editor.lastLine(); i++) {
        const lineString = editor.getLine(i);
        if (lineString.startsWith(search)) {
            return i;
        }
    }
    return undefined;
}
const saveSettingsToFrontMatter = ({ frontmatter }, editor, settings) => {
    if (frontmatter !== undefined) {
        // Front matter already exists, so we'll need to insert the settings into the front matter
        const frontMatterLine = frontmatter.position.start.line;
        const v = settingsToCompactFrontMatterValue(settings);
        const frontMatterAdditions = `number headings: ${v}\n`;
        if (frontmatter['number headings'] !== undefined) {
            // Key already present, replace it
            const keyLine = findLineWhichStartsWith(editor, 'number headings', frontMatterLine);
            if (keyLine === undefined)
                throw new Error('Number Headings Plugin: "number headings" key exists but not found.');
            const from = { line: keyLine, ch: 0 };
            const to = { line: keyLine + 1, ch: 0 };
            editor.replaceRange(frontMatterAdditions, from, to);
        }
        else {
            // Key not present, insert new key
            const from = { line: frontMatterLine + 1, ch: 0 };
            const to = { line: frontMatterLine + 1, ch: 0 };
            editor.replaceRange(frontMatterAdditions, from, to);
        }
    }
    else {
        // No frontmatter found, create frontmatter from scratch
        const v = settingsToCompactFrontMatterValue(settings);
        const newFrontMatter = `---\nnumber headings: ${v}\n---\n\n`;
        const from = { line: 0, ch: 0 };
        const to = { line: 0, ch: 0 };
        editor.replaceRange(newFrontMatter, from, to);
        // Front matter does not exist, so we will create it from scratch
    }
};

class NumberingDoneModal extends obsidian.Modal {
    constructor(app, config) {
        super(app);
        this.config = config;
    }
    onOpen() {
        const { contentEl, titleEl } = this;
        titleEl.setText('Number Headings - Successfully Completed');
        contentEl.createEl('div', { text: this.config.message });
        contentEl.createEl('pre', { text: this.config.preformattedMessage });
        contentEl.createEl('div', { text: "Do you want to save these settings in the document's front matter?", cls: 'number-headings-question' });
        const containerForButtons = contentEl.createEl('div', { cls: 'number-headings-button-container' });
        const noButton = containerForButtons.createEl('button', {});
        noButton.setText('No');
        noButton.onClickEvent((ev) => {
            this.close();
            return ev;
        });
        const yesButton = containerForButtons.createEl('button', {});
        yesButton.setText('Yes, save settings in document');
        yesButton.onClickEvent((ev) => {
            this.config.saveSettingsCallback(false);
            this.close();
            return ev;
        });
        const yesAndAutoButton = containerForButtons.createEl('button', {});
        yesAndAutoButton.setText('Yes, save settings in document, and automatically number');
        yesAndAutoButton.onClickEvent((ev) => {
            this.config.saveSettingsCallback(true);
            this.close();
            return ev;
        });
    }
    onClose() {
        const { contentEl, titleEl } = this;
        contentEl.empty();
        titleEl.empty();
    }
}
function showNumberingDoneMessage(app, settings, viewInfo) {
    const saveSettingsCallback = (shouldAddAutoFlag) => {
        const tweakedSettings = Object.assign({}, settings);
        if (shouldAddAutoFlag)
            tweakedSettings.auto = true;
        saveSettingsToFrontMatter(viewInfo.data, viewInfo.editor, tweakedSettings);
    };
    const config = {
        message: `Successfully updated all heading numbers in the document, using the settings below. 
      See settings panel to change how headings are numbered, or use front matter
      (see settings panel).`,
        preformattedMessage: `  Skip top heading level: ${settings.skipTopLevel}
First heading level: ${settings.firstLevel}
Start numbering first heading at: ${settings.startAt}
Maximum heading level: ${settings.maxLevel}
Style for level 1 headings: ${settings.styleLevel1}
Style for lower level headings (below level 1): ${settings.styleLevelOther}
Separator: ${settings.separator}
Table of Contents Anchor: ${settings.contents}`,
        saveSettingsCallback
    };
    const leaf = app.workspace.activeLeaf;
    if (leaf) {
        new NumberingDoneModal(app, config).open();
    }
}

const TOC_LIST_ITEM_BULLET = '-';
function makeHeadingHashString(editor, heading) {
    const regex = /^\s{0,4}#+/g;
    const headingLineString = editor.getLine(heading.position.start.line);
    if (!headingLineString)
        return undefined;
    const matches = headingLineString.match(regex);
    if (!matches)
        return undefined;
    if (matches.length !== 1) {
        // eslint-disable-next-line no-console
        console.log("Unexpected heading format: '" + headingLineString + "'");
        return undefined;
    }
    const match = matches[0];
    return match.trimLeft();
}
function findHeadingPrefixRange(editor, heading) {
    const lineNumber = heading.position.start.line;
    const lineText = editor.getLine(lineNumber);
    return findRangeInHeaderString(lineText, lineNumber);
}
function cleanHeadingTextForToc(htext) {
    if (htext.contains('^')) {
        const x = htext.split('^');
        if (x.length > 1) {
            return x[0].trim();
        }
    }
    return htext.trim();
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function createTocEntry(h, settings, initialHeadingLevel) {
    const text = h.heading;
    const cleanText = cleanHeadingTextForToc(text);
    let bulletIndent = '';
    const startLevel = initialHeadingLevel;
    for (let i = startLevel; i < h.level; i++) {
        bulletIndent += '\t';
    }
    const entryLink = `[[#${text}|${cleanText}]]`;
    return bulletIndent + TOC_LIST_ITEM_BULLET + ' ' + entryLink;
}
// Replace a range, but only if there is a change in text, to prevent poluting the undo stack
function replaceRangeEconomically(editor, changes, range, text) {
    const previousText = editor.getRange(range.from, range.to);
    if (previousText !== text) {
        changes.push({
            text: text,
            from: range.from,
            to: range.to
        });
    }
}
const updateHeadingNumbering = (viewInfo, settings) => {
    var _a;
    if (!viewInfo)
        return;
    const headings = (_a = viewInfo.data.headings) !== null && _a !== void 0 ? _a : [];
    const editor = viewInfo.editor;
    let previousLevel = 1;
    let numberingStack = [startAtOrZerothInStyle(settings.startAt, settings.styleLevel1)];
    if (settings.firstLevel > 1) {
        previousLevel = settings.firstLevel;
    }
    else if (settings.skipTopLevel) {
        previousLevel = 2;
    }
    const changes = [];
    for (const heading of headings) {
        // Update the numbering stack based on the level and previous level
        const level = heading.level;
        // Handle skipped & ignored levels.
        if ((settings.firstLevel > level) || (settings.skipTopLevel && level === 1)) {
            // Resets the numbering when a level is skipped.
            // Note: This leaves headings as they are, allowing people to have numbers at the start of
            // ignored headings.
            numberingStack = [startAtOrZerothInStyle(settings.startAt, settings.styleLevel1)];
            if (settings.firstLevel > 1) {
                previousLevel = settings.firstLevel;
            }
            else if (settings.skipTopLevel) {
                previousLevel = 2;
            }
            continue;
        }
        // Adjust numbering stack
        if (level === previousLevel) {
            const x = numberingStack.pop();
            if (x !== undefined) {
                numberingStack.push(nextNumberingToken(x));
            }
        }
        else if (level < previousLevel) {
            for (let i = previousLevel; i > level; i--) {
                numberingStack.pop();
            }
            const x = numberingStack.pop();
            if (x !== undefined) {
                numberingStack.push(nextNumberingToken(x));
            }
        }
        else if (level > previousLevel) {
            for (let i = previousLevel; i < level; i++) {
                numberingStack.push(firstNumberingTokenInStyle(settings.styleLevelOther));
            }
        }
        // Set the previous level to this level for the next iteration
        previousLevel = level;
        if (level > settings.maxLevel) {
            // If we are above the max level, just don't number it
            continue;
        }
        // Find the range to replace, and then do it
        const prefixRange = findHeadingPrefixRange(editor, heading);
        if (prefixRange === undefined)
            return;
        const headingHashString = makeHeadingHashString(editor, heading);
        if (headingHashString === undefined)
            return;
        const prefixString = makeNumberingString(numberingStack);
        replaceRangeEconomically(editor, changes, prefixRange, headingHashString + prefixString + settings.separator + ' ');
    }
    // Execute the transaction to make all the changes at once
    if (changes.length > 0) {
        // eslint-disable-next-line no-console
        console.log('Number Headings Plugin: Applying headings numbering changes:', changes.length);
        editor.transaction({
            changes: changes
        });
    }
};
const updateTableOfContents = (viewInfo, settings) => {
    var _a;
    if (!viewInfo)
        return;
    const headings = (_a = viewInfo.data.headings) !== null && _a !== void 0 ? _a : [];
    const editor = viewInfo.editor;
    if (!doesContentsHaveValue(settings.contents))
        return;
    let tocHeading;
    let tocBuilder = '\n';
    const changes = [];
    // In case headings start above level 1, we don't want to indent the bullets too much
    let initialHeadingLevel = 1;
    if (headings.length > 0) {
        initialHeadingLevel = headings[0].level;
    }
    for (const heading of headings) {
        // ORDERING: Important to find the TOC heading before skipping skipped headings, since that is for numbering
        // Find the TOC heading
        if (heading.heading.endsWith(settings.contents)) {
            tocHeading = heading;
        }
        /* This code lets us skip TOC lines for skipped headings, but doesn't work well with first-level setting
        if ((settings.skipTopLevel && heading.level === 1) || (heading.level > settings.maxLevel)) {
          continue
        }
        */
        const tocEntry = createTocEntry(heading, settings, initialHeadingLevel);
        tocBuilder += tocEntry + '\n';
    }
    // Insert the generated table of contents
    if (tocHeading) {
        const from = {
            line: tocHeading.position.start.line + 1,
            ch: 0
        };
        // Find the end of the TOC section
        const startingLine = tocHeading.position.start.line + 1;
        let endingLine = startingLine;
        let foundList = false;
        const lastLineInEditor = editor.lastLine();
        for (;; endingLine++) {
            const line = editor.getLine(endingLine);
            if (line === undefined || endingLine > lastLineInEditor) {
                // Reached end of file, insert at the start of the TOC section
                endingLine = startingLine;
                break;
            }
            const trimmedLineText = line.trimStart();
            if (foundList) {
                if (!trimmedLineText.startsWith(TOC_LIST_ITEM_BULLET))
                    break;
                if (trimmedLineText.startsWith('#'))
                    break;
            }
            else {
                if (trimmedLineText.startsWith(TOC_LIST_ITEM_BULLET)) {
                    foundList = true;
                }
                else if (trimmedLineText.startsWith('#')) {
                    // Reached the next heading without finding existing TOC list, insert at the start of the TOC section
                    endingLine = startingLine;
                    break;
                }
                else {
                    continue;
                }
            }
        }
        if (tocBuilder === '\n') {
            tocBuilder = '';
        }
        const to = {
            line: endingLine,
            ch: 0
        };
        const range = { from, to };
        replaceRangeEconomically(editor, changes, range, tocBuilder);
    }
    // Execute the transaction to make all the changes at once
    if (changes.length > 0) {
        // eslint-disable-next-line no-console
        console.log('Number Headings Plugin: Applying table of contents changes:', changes.length);
        editor.transaction({
            changes: changes
        });
    }
};
const removeHeadingNumbering = (viewInfo) => {
    var _a;
    if (!viewInfo)
        return;
    const headings = (_a = viewInfo.data.headings) !== null && _a !== void 0 ? _a : [];
    const editor = viewInfo.editor;
    const changes = [];
    for (const heading of headings) {
        const prefixRange = findHeadingPrefixRange(editor, heading);
        if (prefixRange === undefined)
            return;
        const headingHashString = makeHeadingHashString(editor, heading);
        if (headingHashString === undefined)
            return;
        replaceRangeEconomically(editor, changes, prefixRange, headingHashString + ' ');
    }
    if (changes.length > 0) {
        editor.transaction({
            changes: changes
        });
    }
};

class NumberHeadingsPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Number Headings - Settings' });
        containerEl.createEl('div', { text: 'To add numbering to your document, bring up the command window (on Mac, type CMD+P), and then type "Number Headings" to see a list of available commands.' });
        containerEl.createEl('br', {});
        containerEl.createEl('div', { text: 'If the document has front matter defined with the below settings, the project-wide settings defined on this screen will be ignored. You can define front matter like this:' });
        containerEl.createEl('pre', {
            text: `    ---
    alias:
    - Example Alias
    tags:
    - example-tag
    number headings: first-level 1, start-at 2, max 6, 1.1, auto, contents ^toc
    ---`
        });
        containerEl.createEl('div', {
            text: `
      The 'number headings' front matter key is used to store numbering settings specific to the file. There are four possible options
      in the value to the right of the colon, separated by commas.
    `
        });
        const ul = containerEl.createEl('ul', {});
        const li0 = ul.createEl('li', {});
        li0.createEl('b', { text: 'Automatic numbering' });
        li0.createEl('span', { text: ': If \'auto\' appears, the document will be automatically numbered.' });
        const li1 = ul.createEl('li', {});
        li1.createEl('b', { text: 'First level to number' });
        li1.createEl('span', { text: ': If \'first-level 2\' appears, the numbering will start at the second level' });
        const li2 = ul.createEl('li', {});
        li2.createEl('b', { text: 'Start numbering first heading at' });
        li2.createEl('span', { text: ': If \'start-at C\' appears, the numbering of the first level will start at C, instead of A' });
        const li3 = ul.createEl('li', {});
        li3.createEl('b', { text: 'Maximum level to number' });
        li3.createEl('span', { text: ': If \'max 6\' appears, the headings above level 6 will be skipped.' });
        const li4 = ul.createEl('li', {});
        li4.createEl('b', { text: 'Table of contents anchor' });
        li4.createEl('span', { text: ': If \'contents ^toc\' appears, the heading that ends with the anchor ^toc will have a table of contents inserted beneath it.' });
        const li5 = ul.createEl('li', {});
        li5.createEl('b', { text: 'Numbering style' });
        li5.createEl('span', {
            text: `:
      A style text like '1.1', 'A.1', or '_.1.1' tells the plugin how to format the headings.
      If a style string ends with '.' (a dot), ':' (a colon), '-' (a dash), or '—' (an emdash), the heading numbers will be separated from the heading title
      with that symbol.`
        });
        const ul3 = li5.createEl('ul', {});
        ul3.createEl('li', {
            text: `      
      For example, '1.1' means both top level and other headings will be numbered starting from '1'.
    `
        });
        ul3.createEl('li', {
            text: `      
      For example, 'A.1' means top level headings will be numbered starting from 'A'.
    `
        });
        ul3.createEl('li', {
            text: `      
      For example, '_.A.1' means top level headings will NOT be numbered, but the next levels will be numbered with letters and numbers.
    `
        });
        ul3.createEl('li', {
            text: `      
      For example, '1.1:' means headings will look like '## 2.4: Example Heading'
    `
        });
        ul3.createEl('li', {
            text: `      
      For example, 'A.1-' means headings will look like '## B.5- Example Heading'
    `
        });
        new obsidian.Setting(containerEl)
            .setName('Skip top heading level')
            .setDesc('If selected, numbering will not be applied to the top heading level.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.skipTopLevel)
            .setTooltip('Skip top heading level')
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.skipTopLevel = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('First heading level')
            .setDesc('First heading level to number.')
            .addSlider(slider => slider
            .setLimits(1, 6, 1)
            .setValue(this.plugin.settings.firstLevel)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.firstLevel = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Start numbering at')
            .setDesc('Start numbering the first heading level from this value.')
            .addText(text => text
            .setValue(this.plugin.settings.startAt)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.startAt = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Maximum heading level')
            .setDesc('Maximum heading level to number.')
            .addSlider(slider => slider
            .setLimits(1, 6, 1)
            .setValue(this.plugin.settings.maxLevel)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.maxLevel = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Style for level 1 headings')
            .setDesc('Defines the numbering style for level one headings. Valid values are 1 (for numbers) or A (for capital letters).')
            .addText(text => text
            .setValue(this.plugin.settings.styleLevel1)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.styleLevel1 = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Style for lower level headings (below level 1)')
            .setDesc('Defines the numbering style for headings below level one. Valid values are 1 (for numbers) or A (for capital letters).')
            .addText(text => text
            .setValue(this.plugin.settings.styleLevelOther)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.styleLevelOther = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Automatic numbering')
            .setDesc('Turns on automatic numbering of documents.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.auto)
            .setTooltip('Turn on automatic numbering')
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.auto = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Separator style')
            .setDesc('Defines the separator style between the heading number and the heading text. Valid values are : (colon) or . (dot) or - (dash) or — (emdash). You can also leave it blank for no separator, or have a space before the separator.')
            .addText(text => text
            .setValue(this.plugin.settings.separator)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.separator = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Table of Contents Anchor')
            .setDesc('Anchor which labels the header where a table of contents should be inserted. The anchor should be added at the end of a header. For example, ^toc.')
            .addText(text => text
            .setValue(this.plugin.settings.contents)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.contents = value;
            yield this.plugin.saveSettings();
        })));
    }
}
class NumberHeadingsPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-console
            console.info('Loading Number Headings Plugin, version ' + this.manifest.version);
            yield this.loadSettings();
            this.addCommand({
                id: 'number-headings-with-options',
                name: 'Number all headings in document (and show options)',
                checkCallback: (checking) => {
                    if (checking)
                        return isViewActive(this.app);
                    const viewInfo = getViewInfo(this.app);
                    if (viewInfo) {
                        const settings = getFrontMatterSettingsOrAlternative(viewInfo.data, this.settings);
                        updateHeadingNumbering(viewInfo, settings);
                        setTimeout(() => {
                            // HACK: This must happen after a timeout so that there is time for the editor transaction to complete
                            const postNumberingViewInfo = getViewInfo(this.app);
                            updateTableOfContents(postNumberingViewInfo, settings);
                        }, 3000);
                        showNumberingDoneMessage(this.app, settings, viewInfo);
                    }
                    return false;
                }
            });
            this.addCommand({
                id: 'number-headings',
                name: 'Number all headings in document',
                checkCallback: (checking) => {
                    if (checking)
                        return isViewActive(this.app);
                    const viewInfo = getViewInfo(this.app);
                    if (viewInfo) {
                        const settings = getFrontMatterSettingsOrAlternative(viewInfo.data, this.settings);
                        updateHeadingNumbering(viewInfo, settings);
                        setTimeout(() => {
                            // HACK: This must happen after a timeout so that there is time for the editor transaction to complete
                            const postNumberingViewInfo = getViewInfo(this.app);
                            updateTableOfContents(postNumberingViewInfo, settings);
                        }, 3000);
                        // NOTE: The line below is intentionally commented out, since this command is the same as
                        //       the above command, except for this line
                        // showNumberingDoneMessage(this.app, settings, viewInfo)
                    }
                    return false;
                }
            });
            this.addCommand({
                id: 'remove-number-headings',
                name: 'Remove numbering from all headings in document',
                checkCallback: (checking) => {
                    if (checking)
                        return isViewActive(this.app);
                    const viewInfo = getViewInfo(this.app);
                    removeHeadingNumbering(viewInfo);
                    return true;
                }
            });
            this.addCommand({
                id: 'save-settings-to-front-matter',
                name: 'Save settings to front matter',
                checkCallback: (checking) => {
                    if (checking)
                        return isViewActive(this.app);
                    const viewInfo = getViewInfo(this.app);
                    if (viewInfo) {
                        const settings = getFrontMatterSettingsOrAlternative(viewInfo.data, this.settings);
                        saveSettingsToFrontMatter(viewInfo.data, viewInfo.editor, settings);
                    }
                    return false;
                }
            });
            this.addSettingTab(new NumberHeadingsPluginSettingTab(this.app, this));
            this.registerInterval(window.setInterval(() => {
                const viewInfo = getViewInfo(this.app);
                if (viewInfo) {
                    const settings = getFrontMatterSettingsOrAlternative(viewInfo.data, this.settings);
                    if (settings.auto) {
                        updateHeadingNumbering(viewInfo, settings);
                        setTimeout(() => {
                            // HACK: This must happen after a timeout so that there is time for the editor transaction to complete
                            const postNumberingViewInfo = getViewInfo(this.app);
                            updateTableOfContents(postNumberingViewInfo, settings);
                        }, 3000);
                        // eslint-disable-next-line no-console
                        console.log('Number Headings Plugin: Automatically numbered document');
                    }
                }
            }, 10 * 1000));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = NumberHeadingsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy9hY3RpdmVWaWV3SGVscGVycy50cyIsInNyYy9udW1iZXJpbmdUb2tlbnMudHMiLCJzcmMvc2V0dGluZ3NUeXBlcy50cyIsInNyYy90ZXh0UHJvY2Vzc2luZy50cyIsInNyYy9mcm9udE1hdHRlci50cyIsInNyYy9tZXNzYWdlcy50cyIsInNyYy9udW1iZXJpbmcudHMiLCJzcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCJpbXBvcnQgeyBBcHAsIENhY2hlZE1ldGFkYXRhLCBFZGl0b3IsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJ1xuXG5mdW5jdGlvbiBnZXRBY3RpdmVWaWV3IChhcHA6IEFwcCk6IE1hcmtkb3duVmlldyB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IGFjdGl2ZVZpZXcgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KVxuICByZXR1cm4gYWN0aXZlVmlldyA/PyB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmlld0FjdGl2ZSAoYXBwOiBBcHApOiBib29sZWFuIHtcbiAgY29uc3QgYWN0aXZlVmlldyA9IGdldEFjdGl2ZVZpZXcoYXBwKVxuICBpZiAoYWN0aXZlVmlldyAmJiBhY3RpdmVWaWV3LmZpbGUpIHJldHVybiB0cnVlXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZXRWaWV3TWV0YWRhdGEgKGFwcDogQXBwKTogQ2FjaGVkTWV0YWRhdGEgfCB1bmRlZmluZWQge1xuICBjb25zdCBhY3RpdmVWaWV3ID0gZ2V0QWN0aXZlVmlldyhhcHApXG4gIGlmIChhY3RpdmVWaWV3ICYmIGFjdGl2ZVZpZXcuZmlsZSkge1xuICAgIGNvbnN0IGRhdGEgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZlVmlldy5maWxlKSB8fCB7fVxuICAgIHJldHVybiBkYXRhXG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdJbmZvIHtcbiAgYWN0aXZlVmlldzogTWFya2Rvd25WaWV3XG4gIGRhdGE6IENhY2hlZE1ldGFkYXRhXG4gIGVkaXRvcjogRWRpdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWV3SW5mbyAoYXBwOiBBcHApOiBWaWV3SW5mbyB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IGFjdGl2ZVZpZXcgPSBnZXRBY3RpdmVWaWV3KGFwcClcbiAgY29uc3QgZGF0YSA9IGdldFZpZXdNZXRhZGF0YShhcHApXG4gIGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcgPyBhY3RpdmVWaWV3LmVkaXRvciA6IHVuZGVmaW5lZFxuXG4gIGlmIChhY3RpdmVWaWV3ICYmIGRhdGEgJiYgZWRpdG9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZVZpZXcsIGRhdGEsIGVkaXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cbiIsImV4cG9ydCB0eXBlIE51bWJlcmluZ1Rva2VuID0gTnVtYmVyaW5nVG9rZW5BcmFiaWMgfCBOdW1iZXJpbmdUb2tlbkFscGhhYmV0XG5leHBvcnQgdHlwZSBOdW1iZXJpbmdUb2tlbkFyYWJpYyA9IHtcbiAgc3R5bGU6ICcxJ1xuICB2YWx1ZTogbnVtYmVyXG59XG5leHBvcnQgdHlwZSBOdW1iZXJpbmdUb2tlbkFscGhhYmV0ID0ge1xuICBzdHlsZTogJ0EnXG4gIHZhbHVlOiBzdHJpbmdcbn1cbmV4cG9ydCB0eXBlIE51bWJlcmluZ1N0eWxlID0gJzEnIHwgJ0EnXG5leHBvcnQgdHlwZSBOdW1iZXJpbmdWYWx1ZSA9IG51bWJlciB8IHN0cmluZ1xuXG4vLyBWYWxpZGF0ZXMgdGhlIHN0cmluZyB1c2luZyBhIHJlZ2V4IHRvIGVuc3VyZSBpcyBpcyBhIHZhbGlkIGFyYWJpYyBudW1iZXJpbmcgdmFsdWVcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQXJhYmljTnVtYmVyaW5nVmFsdWVTdHJpbmcgKHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCByZWdleCA9IC9eWzAtOV0rJC9cbiAgcmV0dXJuIHJlZ2V4LnRlc3Qocylcbn1cblxuLy8gVmFsaWRhdGVzIHRoZSBzdHJpbmcgdXNpbmcgYSByZWdleCB0byBlbnN1cmUgaXMgaXMgYSB2YWxpZCBhbHBoYWJldCBudW1iZXJpbmcgdmFsdWVcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQWxwaGFiZXROdW1iZXJpbmdWYWx1ZVN0cmluZyAoczogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IHJlZ2V4ID0gL15bQS1aXSQvXG4gIHJldHVybiByZWdleC50ZXN0KHMpXG59XG5cbmZ1bmN0aW9uIHByaW50YWJsZU51bWJlcmluZ1Rva2VuICh0OiBOdW1iZXJpbmdUb2tlbik6IHN0cmluZyB7XG4gIHN3aXRjaCAodC5zdHlsZSkge1xuICAgIGNhc2UgJzEnOlxuICAgICAgcmV0dXJuIHQudmFsdWUudG9TdHJpbmcoKVxuICAgIGNhc2UgJ0EnOlxuICAgICAgcmV0dXJuIHQudmFsdWVcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gemVyb3RoTnVtYmVyaW5nVG9rZW5JblN0eWxlIChzdHlsZTogTnVtYmVyaW5nU3R5bGUpOiBOdW1iZXJpbmdUb2tlbiB7XG4gIHN3aXRjaCAoc3R5bGUpIHtcbiAgICBjYXNlICcxJzpcbiAgICAgIHJldHVybiB7IHN0eWxlOiAnMScsIHZhbHVlOiAwIH1cbiAgICBjYXNlICdBJzpcbiAgICAgIHJldHVybiB7IHN0eWxlOiAnQScsIHZhbHVlOiAnWicgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdE51bWJlcmluZ1Rva2VuSW5TdHlsZSAoc3R5bGU6IE51bWJlcmluZ1N0eWxlKTogTnVtYmVyaW5nVG9rZW4ge1xuICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgY2FzZSAnMSc6XG4gICAgICByZXR1cm4geyBzdHlsZTogJzEnLCB2YWx1ZTogMSB9XG4gICAgY2FzZSAnQSc6XG4gICAgICByZXR1cm4geyBzdHlsZTogJ0EnLCB2YWx1ZTogJ0EnIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dE51bWJlcmluZ1Rva2VuICh0OiBOdW1iZXJpbmdUb2tlbik6IE51bWJlcmluZ1Rva2VuIHtcbiAgc3dpdGNoICh0LnN0eWxlKSB7XG4gICAgY2FzZSAnMSc6XG4gICAgICByZXR1cm4geyBzdHlsZTogJzEnLCB2YWx1ZTogdC52YWx1ZSArIDEgfVxuICAgIGNhc2UgJ0EnOlxuICAgICAgaWYgKHQudmFsdWUgPT09ICdaJykgcmV0dXJuIHsgc3R5bGU6ICdBJywgdmFsdWU6ICdBJyB9XG4gICAgICBlbHNlIHJldHVybiB7IHN0eWxlOiAnQScsIHZhbHVlOiBTdHJpbmcuZnJvbUNoYXJDb2RlKHQudmFsdWUuY2hhckNvZGVBdCgwKSArIDEpIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldmlvdXNOdW1iZXJpbmdUb2tlbiAodDogTnVtYmVyaW5nVG9rZW4pOiBOdW1iZXJpbmdUb2tlbiB7XG4gIHN3aXRjaCAodC5zdHlsZSkge1xuICAgIGNhc2UgJzEnOlxuICAgICAgcmV0dXJuIHsgc3R5bGU6ICcxJywgdmFsdWU6IHQudmFsdWUgLSAxIH1cbiAgICBjYXNlICdBJzpcbiAgICAgIGlmICh0LnZhbHVlID09PSAnQScpIHJldHVybiB7IHN0eWxlOiAnQScsIHZhbHVlOiAnWicgfVxuICAgICAgZWxzZSByZXR1cm4geyBzdHlsZTogJ0EnLCB2YWx1ZTogU3RyaW5nLmZyb21DaGFyQ29kZSh0LnZhbHVlLmNoYXJDb2RlQXQoMCkgLSAxKSB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VOdW1iZXJpbmdTdHJpbmcgKG51bWJlcmluZ1N0YWNrOiBOdW1iZXJpbmdUb2tlbltdKTogc3RyaW5nIHtcbiAgbGV0IG51bWJlcmluZ1N0cmluZyA9ICcnXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJpbmdTdGFjay5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID09PSAwKSB7XG4gICAgICBudW1iZXJpbmdTdHJpbmcgKz0gJyAnXG4gICAgfSBlbHNlIHtcbiAgICAgIG51bWJlcmluZ1N0cmluZyArPSAnLidcbiAgICB9XG4gICAgbnVtYmVyaW5nU3RyaW5nICs9IHByaW50YWJsZU51bWJlcmluZ1Rva2VuKG51bWJlcmluZ1N0YWNrW2ldKVxuICB9XG5cbiAgcmV0dXJuIG51bWJlcmluZ1N0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRBdE9yWmVyb3RoSW5TdHlsZSAoc3RhcnRBdFNldHRpbmdTdHJpbmc6IHN0cmluZywgc3R5bGUgOiBOdW1iZXJpbmdTdHlsZSk6IE51bWJlcmluZ1Rva2VuIHtcbiAgaWYgKHN0YXJ0QXRTZXR0aW5nU3RyaW5nID09PSAnJykgcmV0dXJuIHplcm90aE51bWJlcmluZ1Rva2VuSW5TdHlsZShzdHlsZSlcblxuICBsZXQgZmlyc3ROdW1iZXJpbmdUb2tlbkZyb21TZXR0aW5nOiBOdW1iZXJpbmdUb2tlblxuXG4gIHN3aXRjaCAoc3R5bGUpIHtcbiAgICBjYXNlICcxJzpcbiAgICAgIGlmICghaXNWYWxpZEFyYWJpY051bWJlcmluZ1ZhbHVlU3RyaW5nKHN0YXJ0QXRTZXR0aW5nU3RyaW5nKSkgcmV0dXJuIHplcm90aE51bWJlcmluZ1Rva2VuSW5TdHlsZShzdHlsZSlcblxuICAgICAgZmlyc3ROdW1iZXJpbmdUb2tlbkZyb21TZXR0aW5nID0geyBzdHlsZTogJzEnLCB2YWx1ZTogcGFyc2VJbnQoc3RhcnRBdFNldHRpbmdTdHJpbmcpIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnQSc6XG4gICAgICBpZiAoIWlzVmFsaWRBbHBoYWJldE51bWJlcmluZ1ZhbHVlU3RyaW5nKHN0YXJ0QXRTZXR0aW5nU3RyaW5nKSkgcmV0dXJuIHplcm90aE51bWJlcmluZ1Rva2VuSW5TdHlsZShzdHlsZSlcbiAgICAgIGZpcnN0TnVtYmVyaW5nVG9rZW5Gcm9tU2V0dGluZyA9IHsgc3R5bGU6ICdBJywgdmFsdWU6IHN0YXJ0QXRTZXR0aW5nU3RyaW5nIH1cbiAgICAgIGJyZWFrXG4gIH1cblxuICAvLyBDb252ZXJ0IHRoZSBmaXJzdCBudW1iZXJpbmcgdG9rZW4gdG8gYSB6ZXJvdGggbnVtYmVyaW5nIHRva2VuXG4gIHJldHVybiBwcmV2aW91c051bWJlcmluZ1Rva2VuKGZpcnN0TnVtYmVyaW5nVG9rZW5Gcm9tU2V0dGluZylcbn1cbiIsImltcG9ydCB7IGlzVmFsaWRBbHBoYWJldE51bWJlcmluZ1ZhbHVlU3RyaW5nLCBpc1ZhbGlkQXJhYmljTnVtYmVyaW5nVmFsdWVTdHJpbmcsIE51bWJlcmluZ1N0eWxlIH0gZnJvbSAnLi9udW1iZXJpbmdUb2tlbnMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgTnVtYmVySGVhZGluZ3NQbHVnaW5TZXR0aW5ncyB7XG4gIHNraXBUb3BMZXZlbDogYm9vbGVhbixcbiAgZmlyc3RMZXZlbDogbnVtYmVyLFxuICBtYXhMZXZlbDogbnVtYmVyLFxuICBzdHlsZUxldmVsMTogTnVtYmVyaW5nU3R5bGUsXG4gIHN0eWxlTGV2ZWxPdGhlcjogTnVtYmVyaW5nU3R5bGUsXG4gIGF1dG86IGJvb2xlYW4sXG4gIHNlcGFyYXRvcjogc3RyaW5nLFxuICBjb250ZW50czogc3RyaW5nLFxuICBzdGFydEF0OiBzdHJpbmcsXG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBSZWFkb25seTxOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzPiA9IHtcbiAgc2tpcFRvcExldmVsOiBmYWxzZSxcbiAgZmlyc3RMZXZlbDogMSxcbiAgbWF4TGV2ZWw6IDYsXG4gIHN0eWxlTGV2ZWwxOiAnMScsXG4gIHN0eWxlTGV2ZWxPdGhlcjogJzEnLFxuICBhdXRvOiBmYWxzZSxcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29udGVudHM6ICcnLFxuICBzdGFydEF0OiAnJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE51bWJlcmluZ1N0eWxlU3RyaW5nIChzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHMgPT09ICdBJyB8fCBzID09PSAnMScpIHJldHVybiB0cnVlXG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE51bWJlcmluZ1ZhbHVlU3RyaW5nIChzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHMgPT09ICcnIHx8IGlzVmFsaWRBcmFiaWNOdW1iZXJpbmdWYWx1ZVN0cmluZyhzKSB8fCBpc1ZhbGlkQWxwaGFiZXROdW1iZXJpbmdWYWx1ZVN0cmluZyhzKSkgcmV0dXJuIHRydWVcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRmxhZyAoZjogdW5rbm93bik6IGJvb2xlYW4ge1xuICBpZiAoZiA9PT0gdHJ1ZSB8fCBmID09PSBmYWxzZSkgcmV0dXJuIHRydWVcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRmlyc3RPck1heExldmVsICh4OiB1bmtub3duKTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicgJiYgeCA+PSAxICYmIHggPD0gNikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkU2VwYXJhdG9yICh4OiB1bmtub3duKTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycgJiYgKHggPT09ICcnIHx8IHggPT09ICc6JyB8fCB4ID09PSAnLicgfHwgeCA9PT0gJy0nIHx8IHggPT09ICfigJQnIC8qIGVtLWRhc2ggKi8gfHwgeCA9PT0gJyA6JyB8fCB4ID09PSAnIC4nIHx8IHggPT09ICcgLScgfHwgeCA9PT0gJyDigJQnIC8qIGVtLWRhc2ggKi8pKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRDb250ZW50cyAoeDogdW5rbm93bik6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnICYmICh4ID09PSAnJyB8fCB4LnN0YXJ0c1dpdGgoJ14nKSkpIHJldHVybiB0cnVlXG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9lc0NvbnRlbnRzSGF2ZVZhbHVlICh4OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHgubGVuZ3RoID4gMiAmJiB4LnN0YXJ0c1dpdGgoJ14nKSkgcmV0dXJuIHRydWVcbiAgcmV0dXJuIGZhbHNlXG59XG4iLCJpbXBvcnQgeyBFZGl0b3JSYW5nZSB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgTnVtYmVyaW5nU3R5bGUgfSBmcm9tICcuL251bWJlcmluZ1Rva2VucydcbmltcG9ydCB7IGlzVmFsaWROdW1iZXJpbmdTdHlsZVN0cmluZywgaXNWYWxpZFNlcGFyYXRvciwgTnVtYmVySGVhZGluZ3NQbHVnaW5TZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3NUeXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRSYW5nZUluSGVhZGVyU3RyaW5nIChsaW5lVGV4dDogc3RyaW5nLCBsaW5lTnVtYmVyOiBudW1iZXIpOiBFZGl0b3JSYW5nZSB8IHVuZGVmaW5lZCB7XG4gIC8vIFJlZ2V4IHRvIG1hdGNoIHRoZSBoZWFkaW5nIHByZWZpeCwgaW5jbHVkaW5nIHRoZSBzcGFjZSBhZnRlciB0aGUgaGFzaChlcyksIGJ1dCBub3QgdGhlIGhlYWRpbmcgdGV4dFxuICBjb25zdCByZWdleCA9IC9eXFxzezAsNH0jKyggKT8oWzAtOV0rXFwufFtBLVpdXFwuKSooWzAtOV0rfFtBLVpdKT8oICk/W+KAlDouLV0/KCApKy9nXG5cbiAgaWYgKCFsaW5lVGV4dCkgcmV0dXJuIHVuZGVmaW5lZFxuXG4gIGNvbnN0IG1hdGNoZXMgPSBsaW5lVGV4dC5tYXRjaChyZWdleClcblxuICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coXCJVbmV4cGVjdGVkIGhlYWRpbmcgZm9ybWF0OiAnXCIgKyBsaW5lVGV4dCArIFwiJ1wiKVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gbWF0Y2hlcyA/IG1hdGNoZXNbMF0gOiAnJ1xuXG4gIGNvbnN0IGZyb20gPSB7XG4gICAgbGluZTogbGluZU51bWJlcixcbiAgICBjaDogMFxuICB9XG4gIGNvbnN0IHRvID0ge1xuICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgY2g6IG1hdGNoLmxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHsgZnJvbSwgdG8gfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU2V0dGluZ3NGcm9tRnJvbnRNYXR0ZXJGb3JtYXRQYXJ0IChwYXJ0OiBzdHJpbmcsIHNldHRpbmdzOiBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzKTogTnVtYmVySGVhZGluZ3NQbHVnaW5TZXR0aW5ncyB7XG4gIC8vIFBhcnNlIHRoZSBzZXBhcmF0b3JcbiAgbGV0IHBhcnRXaXRob3V0U2VwYXJhdG9yID0gcGFydFxuICBjb25zdCBwb3RlbnRpYWxUd29DaGFyU2VwYXJhdG9yID0gcGFydC5zbGljZSgtMilcbiAgaWYgKGlzVmFsaWRTZXBhcmF0b3IocG90ZW50aWFsVHdvQ2hhclNlcGFyYXRvcikpIHtcbiAgICBzZXR0aW5ncy5zZXBhcmF0b3IgPSBwb3RlbnRpYWxUd29DaGFyU2VwYXJhdG9yXG4gICAgcGFydFdpdGhvdXRTZXBhcmF0b3IgPSBwYXJ0LnNsaWNlKDAsIC0yKVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBvdGVudGlhbE9uZUNoYXJTZXBhcmF0b3IgPSBwYXJ0LnNsaWNlKC0xKVxuICAgIGlmIChpc1ZhbGlkU2VwYXJhdG9yKHBvdGVudGlhbE9uZUNoYXJTZXBhcmF0b3IpKSB7XG4gICAgICBzZXR0aW5ncy5zZXBhcmF0b3IgPSBwb3RlbnRpYWxPbmVDaGFyU2VwYXJhdG9yXG4gICAgICBwYXJ0V2l0aG91dFNlcGFyYXRvciA9IHBhcnQuc2xpY2UoMCwgLTEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldHRpbmdzLnNlcGFyYXRvciA9ICcnXG4gICAgfVxuICB9XG5cbiAgLy8gUGFyc2UgdGhlIG51bWJlcmluZyBzdHlsZVxuICBjb25zdCBkZXNjcmlwdG9ycyA9IHBhcnRXaXRob3V0U2VwYXJhdG9yLnNwbGl0KCcuJylcbiAgbGV0IGZpcnN0TnVtYmVyZWREZXNjcmlwdG9yID0gMFxuXG4gIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgZmlyc3QgZGVzY3JpcHRvciBpcyBhbiB1bmRlcnNjb3JlXG4gIGlmIChkZXNjcmlwdG9ycy5sZW5ndGggPiAxICYmIGRlc2NyaXB0b3JzWzBdID09PSAnXycpIHtcbiAgICAvLyBUaGUgZmlyc3QgZGVzY3JpcHRvciBpcyBhbiBpbnN0cnVjdGlvbiB0byBza2lwIHRvcCBsZXZlbHMsIHNvIHNraXAgdGhlbVxuICAgIHNldHRpbmdzLnNraXBUb3BMZXZlbCA9IHRydWVcbiAgICBmaXJzdE51bWJlcmVkRGVzY3JpcHRvciA9IDFcbiAgfSBlbHNlIHtcbiAgICBzZXR0aW5ncy5za2lwVG9wTGV2ZWwgPSBmYWxzZVxuICB9XG5cbiAgaWYgKGRlc2NyaXB0b3JzLmxlbmd0aCAtIGZpcnN0TnVtYmVyZWREZXNjcmlwdG9yID49IDIpIHtcbiAgICBjb25zdCBzdHlsZUxldmVsMSA9IGRlc2NyaXB0b3JzW2ZpcnN0TnVtYmVyZWREZXNjcmlwdG9yXVxuICAgIGlmIChpc1ZhbGlkTnVtYmVyaW5nU3R5bGVTdHJpbmcoc3R5bGVMZXZlbDEpKSB7XG4gICAgICBzZXR0aW5ncy5zdHlsZUxldmVsMSA9IHN0eWxlTGV2ZWwxIGFzIE51bWJlcmluZ1N0eWxlXG4gICAgfVxuICAgIGNvbnN0IHN0eWxlTGV2ZWxPdGhlciA9IGRlc2NyaXB0b3JzW2ZpcnN0TnVtYmVyZWREZXNjcmlwdG9yICsgMV1cbiAgICBpZiAoaXNWYWxpZE51bWJlcmluZ1N0eWxlU3RyaW5nKHN0eWxlTGV2ZWxPdGhlcikpIHtcbiAgICAgIHNldHRpbmdzLnN0eWxlTGV2ZWxPdGhlciA9IHN0eWxlTGV2ZWxPdGhlciBhcyBOdW1iZXJpbmdTdHlsZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZXR0aW5nc1xufVxuIiwiaW1wb3J0IHsgQ2FjaGVkTWV0YWRhdGEsIEVkaXRvciwgRWRpdG9yUG9zaXRpb24sIEZyb250TWF0dGVyQ2FjaGUsIHBhcnNlRnJvbnRNYXR0ZXJFbnRyeSB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgTnVtYmVyaW5nU3R5bGUgfSBmcm9tICcuL251bWJlcmluZ1Rva2VucydcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MsIGlzVmFsaWRDb250ZW50cywgaXNWYWxpZEZpcnN0T3JNYXhMZXZlbCwgaXNWYWxpZEZsYWcsIGlzVmFsaWROdW1iZXJpbmdTdHlsZVN0cmluZywgaXNWYWxpZE51bWJlcmluZ1ZhbHVlU3RyaW5nLCBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5nc1R5cGVzJ1xuaW1wb3J0IHsgdXBkYXRlU2V0dGluZ3NGcm9tRnJvbnRNYXR0ZXJGb3JtYXRQYXJ0IH0gZnJvbSAnLi90ZXh0UHJvY2Vzc2luZydcblxuY29uc3QgQVVUT19QQVJUX0tFWSA9ICdhdXRvJ1xuY29uc3QgRklSU1RfTEVWRUxfUEFSVF9LRVkgPSAnZmlyc3QtbGV2ZWwnXG5jb25zdCBNQVhfTEVWRUxfUEFSVF9LRVkgPSAnbWF4J1xuY29uc3QgQ09OVEVOVFNfUEFSVF9LRVkgPSAnY29udGVudHMnXG5jb25zdCBTVEFSVF9BVF9QQVJUX0tFWSA9ICdzdGFydC1hdCdcblxuZnVuY3Rpb24gcGFyc2VDb21wYWN0RnJvbnRNYXR0ZXJTZXR0aW5ncyAoZm06IEZyb250TWF0dGVyQ2FjaGUpOiBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgZW50cnkgPSBwYXJzZUZyb250TWF0dGVyRW50cnkoZm0sICdudW1iZXIgaGVhZGluZ3MnKVxuICBpZiAoZW50cnkpIHtcbiAgICBjb25zdCBlbnRyeVN0cmluZyA9IFN0cmluZyhlbnRyeSlcbiAgICBjb25zdCBwYXJ0cyA9IGVudHJ5U3RyaW5nLnNwbGl0KCcsJylcbiAgICBsZXQgc2V0dGluZ3M6IE51bWJlckhlYWRpbmdzUGx1Z2luU2V0dGluZ3MgPSB7IC4uLkRFRkFVTFRfU0VUVElOR1MgfVxuXG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgICBjb25zdCB0cmltbWVkUGFydCA9IHBhcnQudHJpbSgpXG4gICAgICBpZiAodHJpbW1lZFBhcnQubGVuZ3RoID09PSAwKSBjb250aW51ZVxuXG4gICAgICBpZiAodHJpbW1lZFBhcnQgPT09IEFVVE9fUEFSVF9LRVkpIHtcbiAgICAgICAgLy8gUGFyc2UgYXV0byBudW1iZXJpbmcgcGFydFxuICAgICAgICBzZXR0aW5ncy5hdXRvID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmICh0cmltbWVkUGFydC5zdGFydHNXaXRoKEZJUlNUX0xFVkVMX1BBUlRfS0VZKSkge1xuICAgICAgICAvLyBQYXJzZSBmaXJzdCBsZXZlbCBwYXJ0XG4gICAgICAgIGNvbnN0IG5zdHJpbmcgPSB0cmltbWVkUGFydC5zdWJzdHJpbmcoRklSU1RfTEVWRUxfUEFSVF9LRVkubGVuZ3RoICsgMSlcbiAgICAgICAgY29uc3QgbiA9IHBhcnNlSW50KG5zdHJpbmcpXG4gICAgICAgIGlmIChpc1ZhbGlkRmlyc3RPck1heExldmVsKG4pKSB7XG4gICAgICAgICAgc2V0dGluZ3MuZmlyc3RMZXZlbCA9IG5cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmltbWVkUGFydC5zdGFydHNXaXRoKE1BWF9MRVZFTF9QQVJUX0tFWSkpIHtcbiAgICAgICAgLy8gUGFyc2UgbWF4IGxldmVsIHBhcnRcbiAgICAgICAgY29uc3QgbnN0cmluZyA9IHRyaW1tZWRQYXJ0LnN1YnN0cmluZyhNQVhfTEVWRUxfUEFSVF9LRVkubGVuZ3RoICsgMSlcbiAgICAgICAgY29uc3QgbiA9IHBhcnNlSW50KG5zdHJpbmcpXG4gICAgICAgIGlmIChpc1ZhbGlkRmlyc3RPck1heExldmVsKG4pKSB7XG4gICAgICAgICAgc2V0dGluZ3MubWF4TGV2ZWwgPSBuXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJpbW1lZFBhcnQuc3RhcnRzV2l0aChTVEFSVF9BVF9QQVJUX0tFWSkpIHtcbiAgICAgICAgLy8gUGFyc2UgXCJzdGFydCBhdFwiIHBhcnRcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0cmltbWVkUGFydC5zdWJzdHJpbmcoU1RBUlRfQVRfUEFSVF9LRVkubGVuZ3RoICsgMSlcbiAgICAgICAgaWYgKGlzVmFsaWROdW1iZXJpbmdWYWx1ZVN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICBzZXR0aW5ncy5zdGFydEF0ID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0cmltbWVkUGFydC5zdGFydHNXaXRoKENPTlRFTlRTX1BBUlRfS0VZKSkge1xuICAgICAgICBpZiAodHJpbW1lZFBhcnQubGVuZ3RoIDw9IENPTlRFTlRTX1BBUlRfS0VZLmxlbmd0aCArIDEpIGNvbnRpbnVlXG4gICAgICAgIC8vIFBhcnNlIGNvbnRlbnRzIGhlYWRpbmcgcGFydFxuICAgICAgICBjb25zdCB0b2NIZWFkaW5nID0gdHJpbW1lZFBhcnQuc3Vic3RyaW5nKENPTlRFTlRTX1BBUlRfS0VZLmxlbmd0aCArIDEpXG4gICAgICAgIGlmIChpc1ZhbGlkQ29udGVudHModG9jSGVhZGluZykpIHtcbiAgICAgICAgICBzZXR0aW5ncy5jb250ZW50cyA9IHRvY0hlYWRpbmdcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUGFyc2UgZm9ybWF0dGluZyBwYXJ0XG4gICAgICAgIHNldHRpbmdzID0gdXBkYXRlU2V0dGluZ3NGcm9tRnJvbnRNYXR0ZXJGb3JtYXRQYXJ0KHRyaW1tZWRQYXJ0LCBzZXR0aW5ncylcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0dGluZ3NcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGNvbnN0IGdldEZyb250TWF0dGVyU2V0dGluZ3NPckFsdGVybmF0aXZlID0gKFxuICB7IGZyb250bWF0dGVyIH06IENhY2hlZE1ldGFkYXRhLFxuICBhbHRlcm5hdGl2ZVNldHRpbmdzOiBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzXG4pOiBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzID0+IHtcbiAgaWYgKGZyb250bWF0dGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBkZWNvbXBhY3RlZFNldHRpbmdzID0gcGFyc2VDb21wYWN0RnJvbnRNYXR0ZXJTZXR0aW5ncyhmcm9udG1hdHRlcilcbiAgICBpZiAoZGVjb21wYWN0ZWRTZXR0aW5ncyAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZGVjb21wYWN0ZWRTZXR0aW5nc1xuXG4gICAgLy8gTk9URTogRXZlcnl0aGluZyBiZWxvdyBpcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgb25seVxuXG4gICAgY29uc3Qgc2tpcFRvcExldmVsRW50cnkgPSBwYXJzZUZyb250TWF0dGVyRW50cnkoZnJvbnRtYXR0ZXIsICdudW1iZXItaGVhZGluZ3Mtc2tpcC10b3AtbGV2ZWwnKSA/PyBwYXJzZUZyb250TWF0dGVyRW50cnkoZnJvbnRtYXR0ZXIsICdoZWFkZXItbnVtYmVyaW5nLXNraXAtdG9wLWxldmVsJylcbiAgICBjb25zdCBza2lwVG9wTGV2ZWwgPSBpc1ZhbGlkRmxhZyhza2lwVG9wTGV2ZWxFbnRyeSkgPyBza2lwVG9wTGV2ZWxFbnRyeSA6IGFsdGVybmF0aXZlU2V0dGluZ3Muc2tpcFRvcExldmVsXG5cbiAgICBjb25zdCBtYXhMZXZlbEVudHJ5ID0gcGFyc2VGcm9udE1hdHRlckVudHJ5KGZyb250bWF0dGVyLCAnbnVtYmVyLWhlYWRpbmdzLW1heC1sZXZlbCcpID8/IHBhcnNlRnJvbnRNYXR0ZXJFbnRyeShmcm9udG1hdHRlciwgJ2hlYWRlci1udW1iZXJpbmctbWF4LWxldmVsJylcbiAgICBjb25zdCBtYXhMZXZlbCA9IGlzVmFsaWRGaXJzdE9yTWF4TGV2ZWwobWF4TGV2ZWxFbnRyeSkgPyBtYXhMZXZlbEVudHJ5IDogYWx0ZXJuYXRpdmVTZXR0aW5ncy5tYXhMZXZlbFxuXG4gICAgY29uc3Qgc3R5bGVMZXZlbDFFbnRyeSA9IFN0cmluZyhcbiAgICAgIHBhcnNlRnJvbnRNYXR0ZXJFbnRyeShmcm9udG1hdHRlciwgJ251bWJlci1oZWFkaW5ncy1zdHlsZS1sZXZlbC0xJykgPz9cbiAgICAgIHBhcnNlRnJvbnRNYXR0ZXJFbnRyeShmcm9udG1hdHRlciwgJ2hlYWRlci1udW1iZXJpbmctc3R5bGUtbGV2ZWwtMScpXG4gICAgKVxuICAgIGNvbnN0IHN0eWxlTGV2ZWwxOiBOdW1iZXJpbmdTdHlsZSA9IGlzVmFsaWROdW1iZXJpbmdTdHlsZVN0cmluZyhzdHlsZUxldmVsMUVudHJ5KSA/IHN0eWxlTGV2ZWwxRW50cnkgYXMgTnVtYmVyaW5nU3R5bGUgOiBhbHRlcm5hdGl2ZVNldHRpbmdzLnN0eWxlTGV2ZWwxXG5cbiAgICBjb25zdCBzdHlsZUxldmVsT3RoZXJFbnRyeSA9IFN0cmluZyhcbiAgICAgIHBhcnNlRnJvbnRNYXR0ZXJFbnRyeShmcm9udG1hdHRlciwgJ251bWJlci1oZWFkaW5ncy1zdHlsZS1sZXZlbC1vdGhlcicpID8/XG4gICAgICBwYXJzZUZyb250TWF0dGVyRW50cnkoZnJvbnRtYXR0ZXIsICdoZWFkZXItbnVtYmVyaW5nLXN0eWxlLWxldmVsLW90aGVyJylcbiAgICApXG4gICAgY29uc3Qgc3R5bGVMZXZlbE90aGVyOiBOdW1iZXJpbmdTdHlsZSA9IGlzVmFsaWROdW1iZXJpbmdTdHlsZVN0cmluZyhzdHlsZUxldmVsT3RoZXJFbnRyeSkgPyBzdHlsZUxldmVsT3RoZXJFbnRyeSBhcyBOdW1iZXJpbmdTdHlsZSA6IGFsdGVybmF0aXZlU2V0dGluZ3Muc3R5bGVMZXZlbE90aGVyXG5cbiAgICBjb25zdCBhdXRvRW50cnkgPSBwYXJzZUZyb250TWF0dGVyRW50cnkoZnJvbnRtYXR0ZXIsICdudW1iZXItaGVhZGluZ3MtYXV0bycpID8/IHBhcnNlRnJvbnRNYXR0ZXJFbnRyeShmcm9udG1hdHRlciwgJ2hlYWRlci1udW1iZXJpbmctYXV0bycpXG4gICAgY29uc3QgYXV0byA9IGlzVmFsaWRGbGFnKGF1dG9FbnRyeSkgPyBhdXRvRW50cnkgOiBhbHRlcm5hdGl2ZVNldHRpbmdzLmF1dG9cblxuICAgIHJldHVybiB7IC4uLmFsdGVybmF0aXZlU2V0dGluZ3MsIHNraXBUb3BMZXZlbCwgbWF4TGV2ZWwsIHN0eWxlTGV2ZWwxLCBzdHlsZUxldmVsT3RoZXIsIGF1dG8gfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBhbHRlcm5hdGl2ZVNldHRpbmdzXG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0dGluZ3NUb0NvbXBhY3RGcm9udE1hdHRlclZhbHVlIChzZXR0aW5nczogTnVtYmVySGVhZGluZ3NQbHVnaW5TZXR0aW5ncyk6IHN0cmluZyB7XG4gIGNvbnN0IGF1dG9QYXJ0ID0gc2V0dGluZ3MuYXV0byA/ICdhdXRvLCAnIDogJydcbiAgY29uc3QgZmlyc3RMZXZlbFBhcnQgPSBgZmlyc3QtbGV2ZWwgJHtzZXR0aW5ncy5maXJzdExldmVsfSwgYFxuICBjb25zdCBtYXhQYXJ0ID0gYG1heCAke3NldHRpbmdzLm1heExldmVsfSwgYFxuICBjb25zdCBjb250ZW50c1BhcnQgPSBzZXR0aW5ncy5jb250ZW50cyAmJiBzZXR0aW5ncy5jb250ZW50cy5sZW5ndGggPiAwID8gYGNvbnRlbnRzICR7c2V0dGluZ3MuY29udGVudHN9LCBgIDogJydcbiAgY29uc3Qgc2tpcFRvcExldmVsU3RyaW5nID0gc2V0dGluZ3Muc2tpcFRvcExldmVsID8gJ18uJyA6ICcnXG4gIGNvbnN0IHN0eWxlUGFydCA9IGAke3NraXBUb3BMZXZlbFN0cmluZ30ke3NldHRpbmdzLnN0eWxlTGV2ZWwxfS4ke3NldHRpbmdzLnN0eWxlTGV2ZWxPdGhlcn0ke3NldHRpbmdzLnNlcGFyYXRvcn1gXG4gIGNvbnN0IHN0YXJ0QXRQYXJ0ID0gc2V0dGluZ3Muc3RhcnRBdCAhPT0gJycgPyBgc3RhcnQtYXQgJHtzZXR0aW5ncy5zdGFydEF0fSwgYCA6ICcnXG4gIHJldHVybiBhdXRvUGFydCArIGZpcnN0TGV2ZWxQYXJ0ICsgbWF4UGFydCArIGNvbnRlbnRzUGFydCArIHN0YXJ0QXRQYXJ0ICsgc3R5bGVQYXJ0XG59XG5cbmZ1bmN0aW9uIGZpbmRMaW5lV2hpY2hTdGFydHNXaXRoIChlZGl0b3I6IEVkaXRvciwgc2VhcmNoOiBzdHJpbmcsIGFmdGVyTGluZTogbnVtYmVyKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgLy8gRmluZCB0aGUgbG9jYXRpb24gb2YgdGhlIGZyb250bWF0dGVyXG4gIGZvciAobGV0IGkgPSBhZnRlckxpbmU7IGkgPCBlZGl0b3IubGFzdExpbmUoKTsgaSsrKSB7XG4gICAgY29uc3QgbGluZVN0cmluZyA9IGVkaXRvci5nZXRMaW5lKGkpXG4gICAgaWYgKGxpbmVTdHJpbmcuc3RhcnRzV2l0aChzZWFyY2gpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBjb25zdCBzYXZlU2V0dGluZ3NUb0Zyb250TWF0dGVyID0gKFxuICB7IGZyb250bWF0dGVyIH06IENhY2hlZE1ldGFkYXRhLFxuICBlZGl0b3I6IEVkaXRvcixcbiAgc2V0dGluZ3M6IE51bWJlckhlYWRpbmdzUGx1Z2luU2V0dGluZ3Ncbik6IHZvaWQgPT4ge1xuICBpZiAoZnJvbnRtYXR0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEZyb250IG1hdHRlciBhbHJlYWR5IGV4aXN0cywgc28gd2UnbGwgbmVlZCB0byBpbnNlcnQgdGhlIHNldHRpbmdzIGludG8gdGhlIGZyb250IG1hdHRlclxuXG4gICAgY29uc3QgZnJvbnRNYXR0ZXJMaW5lID0gZnJvbnRtYXR0ZXIucG9zaXRpb24uc3RhcnQubGluZVxuICAgIGNvbnN0IHYgPSBzZXR0aW5nc1RvQ29tcGFjdEZyb250TWF0dGVyVmFsdWUoc2V0dGluZ3MpXG4gICAgY29uc3QgZnJvbnRNYXR0ZXJBZGRpdGlvbnMgPSBgbnVtYmVyIGhlYWRpbmdzOiAke3Z9XFxuYFxuXG4gICAgaWYgKGZyb250bWF0dGVyWydudW1iZXIgaGVhZGluZ3MnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBLZXkgYWxyZWFkeSBwcmVzZW50LCByZXBsYWNlIGl0XG4gICAgICBjb25zdCBrZXlMaW5lID0gZmluZExpbmVXaGljaFN0YXJ0c1dpdGgoZWRpdG9yLCAnbnVtYmVyIGhlYWRpbmdzJywgZnJvbnRNYXR0ZXJMaW5lKVxuICAgICAgaWYgKGtleUxpbmUgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgSGVhZGluZ3MgUGx1Z2luOiBcIm51bWJlciBoZWFkaW5nc1wiIGtleSBleGlzdHMgYnV0IG5vdCBmb3VuZC4nKVxuICAgICAgY29uc3QgZnJvbTogRWRpdG9yUG9zaXRpb24gPSB7IGxpbmU6IGtleUxpbmUsIGNoOiAwIH1cbiAgICAgIGNvbnN0IHRvOiBFZGl0b3JQb3NpdGlvbiA9IHsgbGluZToga2V5TGluZSArIDEsIGNoOiAwIH1cbiAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoZnJvbnRNYXR0ZXJBZGRpdGlvbnMsIGZyb20sIHRvKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBLZXkgbm90IHByZXNlbnQsIGluc2VydCBuZXcga2V5XG4gICAgICBjb25zdCBmcm9tOiBFZGl0b3JQb3NpdGlvbiA9IHsgbGluZTogZnJvbnRNYXR0ZXJMaW5lICsgMSwgY2g6IDAgfVxuICAgICAgY29uc3QgdG86IEVkaXRvclBvc2l0aW9uID0geyBsaW5lOiBmcm9udE1hdHRlckxpbmUgKyAxLCBjaDogMCB9XG4gICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKGZyb250TWF0dGVyQWRkaXRpb25zLCBmcm9tLCB0bylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gZnJvbnRtYXR0ZXIgZm91bmQsIGNyZWF0ZSBmcm9udG1hdHRlciBmcm9tIHNjcmF0Y2hcbiAgICBjb25zdCB2ID0gc2V0dGluZ3NUb0NvbXBhY3RGcm9udE1hdHRlclZhbHVlKHNldHRpbmdzKVxuICAgIGNvbnN0IG5ld0Zyb250TWF0dGVyID0gYC0tLVxcbm51bWJlciBoZWFkaW5nczogJHt2fVxcbi0tLVxcblxcbmBcbiAgICBjb25zdCBmcm9tOiBFZGl0b3JQb3NpdGlvbiA9IHsgbGluZTogMCwgY2g6IDAgfVxuICAgIGNvbnN0IHRvOiBFZGl0b3JQb3NpdGlvbiA9IHsgbGluZTogMCwgY2g6IDAgfVxuICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UobmV3RnJvbnRNYXR0ZXIsIGZyb20sIHRvKVxuICAgIC8vIEZyb250IG1hdHRlciBkb2VzIG5vdCBleGlzdCwgc28gd2Ugd2lsbCBjcmVhdGUgaXQgZnJvbSBzY3JhdGNoXG4gIH1cbn1cbiIsImltcG9ydCB7IEFwcCwgTW9kYWwgfSBmcm9tICdvYnNpZGlhbidcbmltcG9ydCB7IFZpZXdJbmZvIH0gZnJvbSAnLi9hY3RpdmVWaWV3SGVscGVycydcbmltcG9ydCB7IHNhdmVTZXR0aW5nc1RvRnJvbnRNYXR0ZXIgfSBmcm9tICcuL2Zyb250TWF0dGVyJ1xuaW1wb3J0IHsgTnVtYmVySGVhZGluZ3NQbHVnaW5TZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3NUeXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBOdW1iZXJpbmdEb25lQ29uZmlnIHtcbiAgbWVzc2FnZTogc3RyaW5nXG4gIHByZWZvcm1hdHRlZE1lc3NhZ2U6IHN0cmluZ1xuICBzYXZlU2V0dGluZ3NDYWxsYmFjazogKHNob3VsZEFkZEF1dG9GbGFnOiBib29sZWFuKSA9PiB2b2lkXG59XG5cbmNsYXNzIE51bWJlcmluZ0RvbmVNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgY29uZmlnOiBOdW1iZXJpbmdEb25lQ29uZmlnXG5cbiAgY29uc3RydWN0b3IgKGFwcDogQXBwLCBjb25maWc6IE51bWJlcmluZ0RvbmVDb25maWcpIHtcbiAgICBzdXBlcihhcHApXG4gICAgdGhpcy5jb25maWcgPSBjb25maWdcbiAgfVxuXG4gIG9uT3BlbiAoKTogdm9pZCB7XG4gICAgY29uc3QgeyBjb250ZW50RWwsIHRpdGxlRWwgfSA9IHRoaXNcbiAgICB0aXRsZUVsLnNldFRleHQoJ051bWJlciBIZWFkaW5ncyAtIFN1Y2Nlc3NmdWxseSBDb21wbGV0ZWQnKVxuXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IHRoaXMuY29uZmlnLm1lc3NhZ2UgfSlcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3ByZScsIHsgdGV4dDogdGhpcy5jb25maWcucHJlZm9ybWF0dGVkTWVzc2FnZSB9KVxuXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IFwiRG8geW91IHdhbnQgdG8gc2F2ZSB0aGVzZSBzZXR0aW5ncyBpbiB0aGUgZG9jdW1lbnQncyBmcm9udCBtYXR0ZXI/XCIsIGNsczogJ251bWJlci1oZWFkaW5ncy1xdWVzdGlvbicgfSlcblxuICAgIGNvbnN0IGNvbnRhaW5lckZvckJ1dHRvbnMgPSBjb250ZW50RWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnbnVtYmVyLWhlYWRpbmdzLWJ1dHRvbi1jb250YWluZXInIH0pXG5cbiAgICBjb25zdCBub0J1dHRvbiA9IGNvbnRhaW5lckZvckJ1dHRvbnMuY3JlYXRlRWwoJ2J1dHRvbicsIHsgfSlcbiAgICBub0J1dHRvbi5zZXRUZXh0KCdObycpXG4gICAgbm9CdXR0b24ub25DbGlja0V2ZW50KChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICByZXR1cm4gZXZcbiAgICB9KVxuXG4gICAgY29uc3QgeWVzQnV0dG9uID0gY29udGFpbmVyRm9yQnV0dG9ucy5jcmVhdGVFbCgnYnV0dG9uJywgeyB9KVxuICAgIHllc0J1dHRvbi5zZXRUZXh0KCdZZXMsIHNhdmUgc2V0dGluZ3MgaW4gZG9jdW1lbnQnKVxuICAgIHllc0J1dHRvbi5vbkNsaWNrRXZlbnQoKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmNvbmZpZy5zYXZlU2V0dGluZ3NDYWxsYmFjayhmYWxzZSlcbiAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgcmV0dXJuIGV2XG4gICAgfSlcblxuICAgIGNvbnN0IHllc0FuZEF1dG9CdXR0b24gPSBjb250YWluZXJGb3JCdXR0b25zLmNyZWF0ZUVsKCdidXR0b24nLCB7IH0pXG4gICAgeWVzQW5kQXV0b0J1dHRvbi5zZXRUZXh0KCdZZXMsIHNhdmUgc2V0dGluZ3MgaW4gZG9jdW1lbnQsIGFuZCBhdXRvbWF0aWNhbGx5IG51bWJlcicpXG4gICAgeWVzQW5kQXV0b0J1dHRvbi5vbkNsaWNrRXZlbnQoKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmNvbmZpZy5zYXZlU2V0dGluZ3NDYWxsYmFjayh0cnVlKVxuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICByZXR1cm4gZXZcbiAgICB9KVxuICB9XG5cbiAgb25DbG9zZSAoKTogdm9pZCB7XG4gICAgY29uc3QgeyBjb250ZW50RWwsIHRpdGxlRWwgfSA9IHRoaXNcbiAgICBjb250ZW50RWwuZW1wdHkoKVxuICAgIHRpdGxlRWwuZW1wdHkoKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93TnVtYmVyaW5nRG9uZU1lc3NhZ2UgKGFwcDogQXBwLCBzZXR0aW5nczogTnVtYmVySGVhZGluZ3NQbHVnaW5TZXR0aW5ncywgdmlld0luZm86IFZpZXdJbmZvKTogdm9pZCB7XG4gIGNvbnN0IHNhdmVTZXR0aW5nc0NhbGxiYWNrID0gKHNob3VsZEFkZEF1dG9GbGFnOiBib29sZWFuKTogdm9pZCA9PiB7XG4gICAgY29uc3QgdHdlYWtlZFNldHRpbmdzID0geyAuLi5zZXR0aW5ncyB9XG4gICAgaWYgKHNob3VsZEFkZEF1dG9GbGFnKSB0d2Vha2VkU2V0dGluZ3MuYXV0byA9IHRydWVcbiAgICBzYXZlU2V0dGluZ3NUb0Zyb250TWF0dGVyKHZpZXdJbmZvLmRhdGEsIHZpZXdJbmZvLmVkaXRvciwgdHdlYWtlZFNldHRpbmdzKVxuICB9XG4gIGNvbnN0IGNvbmZpZzogTnVtYmVyaW5nRG9uZUNvbmZpZyA9IHtcbiAgICBtZXNzYWdlOiBgU3VjY2Vzc2Z1bGx5IHVwZGF0ZWQgYWxsIGhlYWRpbmcgbnVtYmVycyBpbiB0aGUgZG9jdW1lbnQsIHVzaW5nIHRoZSBzZXR0aW5ncyBiZWxvdy4gXG4gICAgICBTZWUgc2V0dGluZ3MgcGFuZWwgdG8gY2hhbmdlIGhvdyBoZWFkaW5ncyBhcmUgbnVtYmVyZWQsIG9yIHVzZSBmcm9udCBtYXR0ZXJcbiAgICAgIChzZWUgc2V0dGluZ3MgcGFuZWwpLmAsXG4gICAgcHJlZm9ybWF0dGVkTWVzc2FnZTogYCAgU2tpcCB0b3AgaGVhZGluZyBsZXZlbDogJHtzZXR0aW5ncy5za2lwVG9wTGV2ZWx9XG5GaXJzdCBoZWFkaW5nIGxldmVsOiAke3NldHRpbmdzLmZpcnN0TGV2ZWx9XG5TdGFydCBudW1iZXJpbmcgZmlyc3QgaGVhZGluZyBhdDogJHtzZXR0aW5ncy5zdGFydEF0fVxuTWF4aW11bSBoZWFkaW5nIGxldmVsOiAke3NldHRpbmdzLm1heExldmVsfVxuU3R5bGUgZm9yIGxldmVsIDEgaGVhZGluZ3M6ICR7c2V0dGluZ3Muc3R5bGVMZXZlbDF9XG5TdHlsZSBmb3IgbG93ZXIgbGV2ZWwgaGVhZGluZ3MgKGJlbG93IGxldmVsIDEpOiAke3NldHRpbmdzLnN0eWxlTGV2ZWxPdGhlcn1cblNlcGFyYXRvcjogJHtzZXR0aW5ncy5zZXBhcmF0b3J9XG5UYWJsZSBvZiBDb250ZW50cyBBbmNob3I6ICR7c2V0dGluZ3MuY29udGVudHN9YCxcbiAgICBzYXZlU2V0dGluZ3NDYWxsYmFja1xuICB9XG5cbiAgY29uc3QgbGVhZiA9IGFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZlxuICBpZiAobGVhZikge1xuICAgIG5ldyBOdW1iZXJpbmdEb25lTW9kYWwoYXBwLCBjb25maWcpLm9wZW4oKVxuICB9XG59XG4iLCJpbXBvcnQgeyBFZGl0b3IsIEVkaXRvckNoYW5nZSwgRWRpdG9yUmFuZ2UsIEhlYWRpbmdDYWNoZSB9IGZyb20gJ29ic2lkaWFuJ1xuaW1wb3J0IHsgVmlld0luZm8gfSBmcm9tICcuL2FjdGl2ZVZpZXdIZWxwZXJzJ1xuaW1wb3J0IHsgZmlyc3ROdW1iZXJpbmdUb2tlbkluU3R5bGUsIG1ha2VOdW1iZXJpbmdTdHJpbmcsIG5leHROdW1iZXJpbmdUb2tlbiwgTnVtYmVyaW5nVG9rZW4sIHN0YXJ0QXRPclplcm90aEluU3R5bGUsIHplcm90aE51bWJlcmluZ1Rva2VuSW5TdHlsZSB9IGZyb20gJy4vbnVtYmVyaW5nVG9rZW5zJ1xuaW1wb3J0IHsgZG9lc0NvbnRlbnRzSGF2ZVZhbHVlLCBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5nc1R5cGVzJ1xuaW1wb3J0IHsgZmluZFJhbmdlSW5IZWFkZXJTdHJpbmcgfSBmcm9tICcuL3RleHRQcm9jZXNzaW5nJ1xuXG5jb25zdCBUT0NfTElTVF9JVEVNX0JVTExFVCA9ICctJ1xuXG5mdW5jdGlvbiBtYWtlSGVhZGluZ0hhc2hTdHJpbmcgKGVkaXRvcjogRWRpdG9yLCBoZWFkaW5nOiBIZWFkaW5nQ2FjaGUpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBjb25zdCByZWdleCA9IC9eXFxzezAsNH0jKy9nXG4gIGNvbnN0IGhlYWRpbmdMaW5lU3RyaW5nID0gZWRpdG9yLmdldExpbmUoaGVhZGluZy5wb3NpdGlvbi5zdGFydC5saW5lKVxuICBpZiAoIWhlYWRpbmdMaW5lU3RyaW5nKSByZXR1cm4gdW5kZWZpbmVkXG5cbiAgY29uc3QgbWF0Y2hlcyA9IGhlYWRpbmdMaW5lU3RyaW5nLm1hdGNoKHJlZ2V4KVxuICBpZiAoIW1hdGNoZXMpIHJldHVybiB1bmRlZmluZWRcblxuICBpZiAobWF0Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKFwiVW5leHBlY3RlZCBoZWFkaW5nIGZvcm1hdDogJ1wiICsgaGVhZGluZ0xpbmVTdHJpbmcgKyBcIidcIilcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBjb25zdCBtYXRjaCA9IG1hdGNoZXNbMF1cbiAgcmV0dXJuIG1hdGNoLnRyaW1MZWZ0KClcbn1cblxuZnVuY3Rpb24gZmluZEhlYWRpbmdQcmVmaXhSYW5nZSAoZWRpdG9yOiBFZGl0b3IsIGhlYWRpbmc6IEhlYWRpbmdDYWNoZSk6IEVkaXRvclJhbmdlIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgbGluZU51bWJlciA9IGhlYWRpbmcucG9zaXRpb24uc3RhcnQubGluZVxuICBjb25zdCBsaW5lVGV4dCA9IGVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpXG4gIHJldHVybiBmaW5kUmFuZ2VJbkhlYWRlclN0cmluZyhsaW5lVGV4dCwgbGluZU51bWJlcilcbn1cblxuZnVuY3Rpb24gY2xlYW5IZWFkaW5nVGV4dEZvclRvYyAoaHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChodGV4dC5jb250YWlucygnXicpKSB7XG4gICAgY29uc3QgeCA9IGh0ZXh0LnNwbGl0KCdeJylcbiAgICBpZiAoeC5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4geFswXS50cmltKClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGh0ZXh0LnRyaW0oKVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5mdW5jdGlvbiBjcmVhdGVUb2NFbnRyeSAoaDogSGVhZGluZ0NhY2hlLCBzZXR0aW5nczogTnVtYmVySGVhZGluZ3NQbHVnaW5TZXR0aW5ncywgaW5pdGlhbEhlYWRpbmdMZXZlbDogbnVtYmVyKTpzdHJpbmcge1xuICBjb25zdCB0ZXh0ID0gaC5oZWFkaW5nXG4gIGNvbnN0IGNsZWFuVGV4dCA9IGNsZWFuSGVhZGluZ1RleHRGb3JUb2ModGV4dClcblxuICBsZXQgYnVsbGV0SW5kZW50ID0gJydcbiAgY29uc3Qgc3RhcnRMZXZlbCA9IGluaXRpYWxIZWFkaW5nTGV2ZWxcbiAgZm9yIChsZXQgaSA9IHN0YXJ0TGV2ZWw7IGkgPCBoLmxldmVsOyBpKyspIHtcbiAgICBidWxsZXRJbmRlbnQgKz0gJ1xcdCdcbiAgfVxuXG4gIGNvbnN0IGVudHJ5TGluayA9IGBbWyMke3RleHR9fCR7Y2xlYW5UZXh0fV1dYFxuXG4gIHJldHVybiBidWxsZXRJbmRlbnQgKyBUT0NfTElTVF9JVEVNX0JVTExFVCArICcgJyArIGVudHJ5TGlua1xufVxuXG4vLyBSZXBsYWNlIGEgcmFuZ2UsIGJ1dCBvbmx5IGlmIHRoZXJlIGlzIGEgY2hhbmdlIGluIHRleHQsIHRvIHByZXZlbnQgcG9sdXRpbmcgdGhlIHVuZG8gc3RhY2tcbmZ1bmN0aW9uIHJlcGxhY2VSYW5nZUVjb25vbWljYWxseSAoZWRpdG9yOiBFZGl0b3IsIGNoYW5nZXM6IEVkaXRvckNoYW5nZVtdLCByYW5nZTogRWRpdG9yUmFuZ2UsIHRleHQ6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBwcmV2aW91c1RleHQgPSBlZGl0b3IuZ2V0UmFuZ2UocmFuZ2UuZnJvbSwgcmFuZ2UudG8pXG5cbiAgaWYgKHByZXZpb3VzVGV4dCAhPT0gdGV4dCkge1xuICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgZnJvbTogcmFuZ2UuZnJvbSxcbiAgICAgIHRvOiByYW5nZS50b1xuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUhlYWRpbmdOdW1iZXJpbmcgPSAoXG4gIHZpZXdJbmZvOiBWaWV3SW5mbyB8IHVuZGVmaW5lZCxcbiAgc2V0dGluZ3M6IE51bWJlckhlYWRpbmdzUGx1Z2luU2V0dGluZ3Ncbik6IHZvaWQgPT4ge1xuICBpZiAoIXZpZXdJbmZvKSByZXR1cm5cbiAgY29uc3QgaGVhZGluZ3MgPSB2aWV3SW5mby5kYXRhLmhlYWRpbmdzID8/IFtdXG4gIGNvbnN0IGVkaXRvciA9IHZpZXdJbmZvLmVkaXRvclxuXG4gIGxldCBwcmV2aW91c0xldmVsID0gMVxuXG4gIGxldCBudW1iZXJpbmdTdGFjazogTnVtYmVyaW5nVG9rZW5bXSA9IFtzdGFydEF0T3JaZXJvdGhJblN0eWxlKHNldHRpbmdzLnN0YXJ0QXQsIHNldHRpbmdzLnN0eWxlTGV2ZWwxKV1cblxuICBpZiAoc2V0dGluZ3MuZmlyc3RMZXZlbCA+IDEpIHtcbiAgICBwcmV2aW91c0xldmVsID0gc2V0dGluZ3MuZmlyc3RMZXZlbFxuICB9IGVsc2UgaWYgKHNldHRpbmdzLnNraXBUb3BMZXZlbCkge1xuICAgIHByZXZpb3VzTGV2ZWwgPSAyXG4gIH1cblxuICBjb25zdCBjaGFuZ2VzOiBFZGl0b3JDaGFuZ2VbXSA9IFtdXG5cbiAgZm9yIChjb25zdCBoZWFkaW5nIG9mIGhlYWRpbmdzKSB7XG4gICAgLy8gVXBkYXRlIHRoZSBudW1iZXJpbmcgc3RhY2sgYmFzZWQgb24gdGhlIGxldmVsIGFuZCBwcmV2aW91cyBsZXZlbFxuXG4gICAgY29uc3QgbGV2ZWwgPSBoZWFkaW5nLmxldmVsXG5cbiAgICAvLyBIYW5kbGUgc2tpcHBlZCAmIGlnbm9yZWQgbGV2ZWxzLlxuICAgIGlmICgoc2V0dGluZ3MuZmlyc3RMZXZlbCA+IGxldmVsKSB8fCAoc2V0dGluZ3Muc2tpcFRvcExldmVsICYmIGxldmVsID09PSAxKSkge1xuICAgICAgLy8gUmVzZXRzIHRoZSBudW1iZXJpbmcgd2hlbiBhIGxldmVsIGlzIHNraXBwZWQuXG4gICAgICAvLyBOb3RlOiBUaGlzIGxlYXZlcyBoZWFkaW5ncyBhcyB0aGV5IGFyZSwgYWxsb3dpbmcgcGVvcGxlIHRvIGhhdmUgbnVtYmVycyBhdCB0aGUgc3RhcnQgb2ZcbiAgICAgIC8vIGlnbm9yZWQgaGVhZGluZ3MuXG5cbiAgICAgIG51bWJlcmluZ1N0YWNrID0gW3N0YXJ0QXRPclplcm90aEluU3R5bGUoc2V0dGluZ3Muc3RhcnRBdCwgc2V0dGluZ3Muc3R5bGVMZXZlbDEpXVxuXG4gICAgICBpZiAoc2V0dGluZ3MuZmlyc3RMZXZlbCA+IDEpIHtcbiAgICAgICAgcHJldmlvdXNMZXZlbCA9IHNldHRpbmdzLmZpcnN0TGV2ZWxcbiAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3Muc2tpcFRvcExldmVsKSB7XG4gICAgICAgIHByZXZpb3VzTGV2ZWwgPSAyXG4gICAgICB9XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIEFkanVzdCBudW1iZXJpbmcgc3RhY2tcbiAgICBpZiAobGV2ZWwgPT09IHByZXZpb3VzTGV2ZWwpIHtcbiAgICAgIGNvbnN0IHggPSBudW1iZXJpbmdTdGFjay5wb3AoKVxuICAgICAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBudW1iZXJpbmdTdGFjay5wdXNoKG5leHROdW1iZXJpbmdUb2tlbih4KSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxldmVsIDwgcHJldmlvdXNMZXZlbCkge1xuICAgICAgZm9yIChsZXQgaSA9IHByZXZpb3VzTGV2ZWw7IGkgPiBsZXZlbDsgaS0tKSB7XG4gICAgICAgIG51bWJlcmluZ1N0YWNrLnBvcCgpXG4gICAgICB9XG4gICAgICBjb25zdCB4ID0gbnVtYmVyaW5nU3RhY2sucG9wKClcbiAgICAgIGlmICh4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbnVtYmVyaW5nU3RhY2sucHVzaChuZXh0TnVtYmVyaW5nVG9rZW4oeCkpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsZXZlbCA+IHByZXZpb3VzTGV2ZWwpIHtcbiAgICAgIGZvciAobGV0IGkgPSBwcmV2aW91c0xldmVsOyBpIDwgbGV2ZWw7IGkrKykge1xuICAgICAgICBudW1iZXJpbmdTdGFjay5wdXNoKGZpcnN0TnVtYmVyaW5nVG9rZW5JblN0eWxlKHNldHRpbmdzLnN0eWxlTGV2ZWxPdGhlcikpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBwcmV2aW91cyBsZXZlbCB0byB0aGlzIGxldmVsIGZvciB0aGUgbmV4dCBpdGVyYXRpb25cbiAgICBwcmV2aW91c0xldmVsID0gbGV2ZWxcblxuICAgIGlmIChsZXZlbCA+IHNldHRpbmdzLm1heExldmVsKSB7XG4gICAgICAvLyBJZiB3ZSBhcmUgYWJvdmUgdGhlIG1heCBsZXZlbCwganVzdCBkb24ndCBudW1iZXIgaXRcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgLy8gRmluZCB0aGUgcmFuZ2UgdG8gcmVwbGFjZSwgYW5kIHRoZW4gZG8gaXRcbiAgICBjb25zdCBwcmVmaXhSYW5nZSA9IGZpbmRIZWFkaW5nUHJlZml4UmFuZ2UoZWRpdG9yLCBoZWFkaW5nKVxuICAgIGlmIChwcmVmaXhSYW5nZSA9PT0gdW5kZWZpbmVkKSByZXR1cm5cbiAgICBjb25zdCBoZWFkaW5nSGFzaFN0cmluZyA9IG1ha2VIZWFkaW5nSGFzaFN0cmluZyhlZGl0b3IsIGhlYWRpbmcpXG4gICAgaWYgKGhlYWRpbmdIYXNoU3RyaW5nID09PSB1bmRlZmluZWQpIHJldHVyblxuICAgIGNvbnN0IHByZWZpeFN0cmluZyA9IG1ha2VOdW1iZXJpbmdTdHJpbmcobnVtYmVyaW5nU3RhY2spXG4gICAgcmVwbGFjZVJhbmdlRWNvbm9taWNhbGx5KGVkaXRvciwgY2hhbmdlcywgcHJlZml4UmFuZ2UsIGhlYWRpbmdIYXNoU3RyaW5nICsgcHJlZml4U3RyaW5nICsgc2V0dGluZ3Muc2VwYXJhdG9yICsgJyAnKVxuICB9XG5cbiAgLy8gRXhlY3V0ZSB0aGUgdHJhbnNhY3Rpb24gdG8gbWFrZSBhbGwgdGhlIGNoYW5nZXMgYXQgb25jZVxuICBpZiAoY2hhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnTnVtYmVyIEhlYWRpbmdzIFBsdWdpbjogQXBwbHlpbmcgaGVhZGluZ3MgbnVtYmVyaW5nIGNoYW5nZXM6JywgY2hhbmdlcy5sZW5ndGgpXG4gICAgZWRpdG9yLnRyYW5zYWN0aW9uKHtcbiAgICAgIGNoYW5nZXM6IGNoYW5nZXNcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVUYWJsZU9mQ29udGVudHMgPSAoXG4gIHZpZXdJbmZvOiBWaWV3SW5mbyB8IHVuZGVmaW5lZCxcbiAgc2V0dGluZ3M6IE51bWJlckhlYWRpbmdzUGx1Z2luU2V0dGluZ3Ncbik6IHZvaWQgPT4ge1xuICBpZiAoIXZpZXdJbmZvKSByZXR1cm5cbiAgY29uc3QgaGVhZGluZ3MgPSB2aWV3SW5mby5kYXRhLmhlYWRpbmdzID8/IFtdXG4gIGNvbnN0IGVkaXRvciA9IHZpZXdJbmZvLmVkaXRvclxuXG4gIGlmICghZG9lc0NvbnRlbnRzSGF2ZVZhbHVlKHNldHRpbmdzLmNvbnRlbnRzKSkgcmV0dXJuXG5cbiAgbGV0IHRvY0hlYWRpbmc6IEhlYWRpbmdDYWNoZSB8IHVuZGVmaW5lZFxuICBsZXQgdG9jQnVpbGRlciA9ICdcXG4nXG4gIGNvbnN0IGNoYW5nZXM6IEVkaXRvckNoYW5nZVtdID0gW11cblxuICAvLyBJbiBjYXNlIGhlYWRpbmdzIHN0YXJ0IGFib3ZlIGxldmVsIDEsIHdlIGRvbid0IHdhbnQgdG8gaW5kZW50IHRoZSBidWxsZXRzIHRvbyBtdWNoXG4gIGxldCBpbml0aWFsSGVhZGluZ0xldmVsID0gMVxuICBpZiAoaGVhZGluZ3MubGVuZ3RoID4gMCkge1xuICAgIGluaXRpYWxIZWFkaW5nTGV2ZWwgPSBoZWFkaW5nc1swXS5sZXZlbFxuICB9XG5cbiAgZm9yIChjb25zdCBoZWFkaW5nIG9mIGhlYWRpbmdzKSB7XG4gICAgLy8gT1JERVJJTkc6IEltcG9ydGFudCB0byBmaW5kIHRoZSBUT0MgaGVhZGluZyBiZWZvcmUgc2tpcHBpbmcgc2tpcHBlZCBoZWFkaW5ncywgc2luY2UgdGhhdCBpcyBmb3IgbnVtYmVyaW5nXG5cbiAgICAvLyBGaW5kIHRoZSBUT0MgaGVhZGluZ1xuICAgIGlmIChoZWFkaW5nLmhlYWRpbmcuZW5kc1dpdGgoc2V0dGluZ3MuY29udGVudHMpKSB7XG4gICAgICB0b2NIZWFkaW5nID0gaGVhZGluZ1xuICAgIH1cblxuICAgIC8qIFRoaXMgY29kZSBsZXRzIHVzIHNraXAgVE9DIGxpbmVzIGZvciBza2lwcGVkIGhlYWRpbmdzLCBidXQgZG9lc24ndCB3b3JrIHdlbGwgd2l0aCBmaXJzdC1sZXZlbCBzZXR0aW5nXG4gICAgaWYgKChzZXR0aW5ncy5za2lwVG9wTGV2ZWwgJiYgaGVhZGluZy5sZXZlbCA9PT0gMSkgfHwgKGhlYWRpbmcubGV2ZWwgPiBzZXR0aW5ncy5tYXhMZXZlbCkpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgICovXG5cbiAgICBjb25zdCB0b2NFbnRyeSA9IGNyZWF0ZVRvY0VudHJ5KGhlYWRpbmcsIHNldHRpbmdzLCBpbml0aWFsSGVhZGluZ0xldmVsKVxuICAgIHRvY0J1aWxkZXIgKz0gdG9jRW50cnkgKyAnXFxuJ1xuICB9XG5cbiAgLy8gSW5zZXJ0IHRoZSBnZW5lcmF0ZWQgdGFibGUgb2YgY29udGVudHNcbiAgaWYgKHRvY0hlYWRpbmcpIHtcbiAgICBjb25zdCBmcm9tID0ge1xuICAgICAgbGluZTogdG9jSGVhZGluZy5wb3NpdGlvbi5zdGFydC5saW5lICsgMSxcbiAgICAgIGNoOiAwXG4gICAgfVxuXG4gICAgLy8gRmluZCB0aGUgZW5kIG9mIHRoZSBUT0Mgc2VjdGlvblxuICAgIGNvbnN0IHN0YXJ0aW5nTGluZSA9IHRvY0hlYWRpbmcucG9zaXRpb24uc3RhcnQubGluZSArIDFcbiAgICBsZXQgZW5kaW5nTGluZSA9IHN0YXJ0aW5nTGluZVxuICAgIGxldCBmb3VuZExpc3QgPSBmYWxzZVxuICAgIGNvbnN0IGxhc3RMaW5lSW5FZGl0b3IgPSBlZGl0b3IubGFzdExpbmUoKVxuICAgIGZvciAoOyA7IGVuZGluZ0xpbmUrKykge1xuICAgICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGVuZGluZ0xpbmUpXG4gICAgICBpZiAobGluZSA9PT0gdW5kZWZpbmVkIHx8IGVuZGluZ0xpbmUgPiBsYXN0TGluZUluRWRpdG9yKSB7XG4gICAgICAgIC8vIFJlYWNoZWQgZW5kIG9mIGZpbGUsIGluc2VydCBhdCB0aGUgc3RhcnQgb2YgdGhlIFRPQyBzZWN0aW9uXG4gICAgICAgIGVuZGluZ0xpbmUgPSBzdGFydGluZ0xpbmVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyaW1tZWRMaW5lVGV4dCA9IGxpbmUudHJpbVN0YXJ0KClcbiAgICAgIGlmIChmb3VuZExpc3QpIHtcbiAgICAgICAgaWYgKCF0cmltbWVkTGluZVRleHQuc3RhcnRzV2l0aChUT0NfTElTVF9JVEVNX0JVTExFVCkpIGJyZWFrXG4gICAgICAgIGlmICh0cmltbWVkTGluZVRleHQuc3RhcnRzV2l0aCgnIycpKSBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRyaW1tZWRMaW5lVGV4dC5zdGFydHNXaXRoKFRPQ19MSVNUX0lURU1fQlVMTEVUKSkge1xuICAgICAgICAgIGZvdW5kTGlzdCA9IHRydWVcbiAgICAgICAgfSBlbHNlIGlmICh0cmltbWVkTGluZVRleHQuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICAgICAgLy8gUmVhY2hlZCB0aGUgbmV4dCBoZWFkaW5nIHdpdGhvdXQgZmluZGluZyBleGlzdGluZyBUT0MgbGlzdCwgaW5zZXJ0IGF0IHRoZSBzdGFydCBvZiB0aGUgVE9DIHNlY3Rpb25cbiAgICAgICAgICBlbmRpbmdMaW5lID0gc3RhcnRpbmdMaW5lXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvY0J1aWxkZXIgPT09ICdcXG4nKSB7XG4gICAgICB0b2NCdWlsZGVyID0gJydcbiAgICB9XG5cbiAgICBjb25zdCB0byA9IHtcbiAgICAgIGxpbmU6IGVuZGluZ0xpbmUsXG4gICAgICBjaDogMFxuICAgIH1cbiAgICBjb25zdCByYW5nZSA9IHsgZnJvbSwgdG8gfVxuICAgIHJlcGxhY2VSYW5nZUVjb25vbWljYWxseShlZGl0b3IsIGNoYW5nZXMsIHJhbmdlLCB0b2NCdWlsZGVyKVxuICB9XG5cbiAgLy8gRXhlY3V0ZSB0aGUgdHJhbnNhY3Rpb24gdG8gbWFrZSBhbGwgdGhlIGNoYW5nZXMgYXQgb25jZVxuICBpZiAoY2hhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnTnVtYmVyIEhlYWRpbmdzIFBsdWdpbjogQXBwbHlpbmcgdGFibGUgb2YgY29udGVudHMgY2hhbmdlczonLCBjaGFuZ2VzLmxlbmd0aClcbiAgICBlZGl0b3IudHJhbnNhY3Rpb24oe1xuICAgICAgY2hhbmdlczogY2hhbmdlc1xuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlbW92ZUhlYWRpbmdOdW1iZXJpbmcgPSAoXG4gIHZpZXdJbmZvOiBWaWV3SW5mbyB8IHVuZGVmaW5lZFxuKTogdm9pZCA9PiB7XG4gIGlmICghdmlld0luZm8pIHJldHVyblxuICBjb25zdCBoZWFkaW5ncyA9IHZpZXdJbmZvLmRhdGEuaGVhZGluZ3MgPz8gW11cbiAgY29uc3QgZWRpdG9yID0gdmlld0luZm8uZWRpdG9yXG5cbiAgY29uc3QgY2hhbmdlczogRWRpdG9yQ2hhbmdlW10gPSBbXVxuXG4gIGZvciAoY29uc3QgaGVhZGluZyBvZiBoZWFkaW5ncykge1xuICAgIGNvbnN0IHByZWZpeFJhbmdlID0gZmluZEhlYWRpbmdQcmVmaXhSYW5nZShlZGl0b3IsIGhlYWRpbmcpXG4gICAgaWYgKHByZWZpeFJhbmdlID09PSB1bmRlZmluZWQpIHJldHVyblxuICAgIGNvbnN0IGhlYWRpbmdIYXNoU3RyaW5nID0gbWFrZUhlYWRpbmdIYXNoU3RyaW5nKGVkaXRvciwgaGVhZGluZylcbiAgICBpZiAoaGVhZGluZ0hhc2hTdHJpbmcgPT09IHVuZGVmaW5lZCkgcmV0dXJuXG4gICAgcmVwbGFjZVJhbmdlRWNvbm9taWNhbGx5KGVkaXRvciwgY2hhbmdlcywgcHJlZml4UmFuZ2UsIGhlYWRpbmdIYXNoU3RyaW5nICsgJyAnKVxuICB9XG5cbiAgaWYgKGNoYW5nZXMubGVuZ3RoID4gMCkge1xuICAgIGVkaXRvci50cmFuc2FjdGlvbih7XG4gICAgICBjaGFuZ2VzOiBjaGFuZ2VzXG4gICAgfSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbidcclxuaW1wb3J0IHsgZ2V0Vmlld0luZm8sIGlzVmlld0FjdGl2ZSB9IGZyb20gJy4vYWN0aXZlVmlld0hlbHBlcnMnXHJcbmltcG9ydCB7IGdldEZyb250TWF0dGVyU2V0dGluZ3NPckFsdGVybmF0aXZlLCBzYXZlU2V0dGluZ3NUb0Zyb250TWF0dGVyIH0gZnJvbSAnLi9mcm9udE1hdHRlcidcclxuaW1wb3J0IHsgc2hvd051bWJlcmluZ0RvbmVNZXNzYWdlIH0gZnJvbSAnLi9tZXNzYWdlcydcclxuaW1wb3J0IHsgcmVtb3ZlSGVhZGluZ051bWJlcmluZywgdXBkYXRlSGVhZGluZ051bWJlcmluZywgdXBkYXRlVGFibGVPZkNvbnRlbnRzIH0gZnJvbSAnLi9udW1iZXJpbmcnXHJcbmltcG9ydCB7IE51bWJlcmluZ1N0eWxlIH0gZnJvbSAnLi9udW1iZXJpbmdUb2tlbnMnXHJcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MsIE51bWJlckhlYWRpbmdzUGx1Z2luU2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzVHlwZXMnXHJcblxyXG5jbGFzcyBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICBwbHVnaW46IE51bWJlckhlYWRpbmdzUGx1Z2luXHJcblxyXG4gIGNvbnN0cnVjdG9yIChhcHA6IEFwcCwgcGx1Z2luOiBOdW1iZXJIZWFkaW5nc1BsdWdpbikge1xyXG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pXHJcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxyXG4gIH1cclxuXHJcbiAgZGlzcGxheSAoKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzXHJcblxyXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKVxyXG5cclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ051bWJlciBIZWFkaW5ncyAtIFNldHRpbmdzJyB9KVxyXG5cclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICdUbyBhZGQgbnVtYmVyaW5nIHRvIHlvdXIgZG9jdW1lbnQsIGJyaW5nIHVwIHRoZSBjb21tYW5kIHdpbmRvdyAob24gTWFjLCB0eXBlIENNRCtQKSwgYW5kIHRoZW4gdHlwZSBcIk51bWJlciBIZWFkaW5nc1wiIHRvIHNlZSBhIGxpc3Qgb2YgYXZhaWxhYmxlIGNvbW1hbmRzLicgfSlcclxuXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnYnInLCB7fSlcclxuXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnSWYgdGhlIGRvY3VtZW50IGhhcyBmcm9udCBtYXR0ZXIgZGVmaW5lZCB3aXRoIHRoZSBiZWxvdyBzZXR0aW5ncywgdGhlIHByb2plY3Qtd2lkZSBzZXR0aW5ncyBkZWZpbmVkIG9uIHRoaXMgc2NyZWVuIHdpbGwgYmUgaWdub3JlZC4gWW91IGNhbiBkZWZpbmUgZnJvbnQgbWF0dGVyIGxpa2UgdGhpczonIH0pXHJcblxyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ3ByZScsIHtcclxuICAgICAgdGV4dDogYCAgICAtLS1cclxuICAgIGFsaWFzOlxyXG4gICAgLSBFeGFtcGxlIEFsaWFzXHJcbiAgICB0YWdzOlxyXG4gICAgLSBleGFtcGxlLXRhZ1xyXG4gICAgbnVtYmVyIGhlYWRpbmdzOiBmaXJzdC1sZXZlbCAxLCBzdGFydC1hdCAyLCBtYXggNiwgMS4xLCBhdXRvLCBjb250ZW50cyBedG9jXHJcbiAgICAtLS1gXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnLCB7XHJcbiAgICAgIHRleHQ6IGBcclxuICAgICAgVGhlICdudW1iZXIgaGVhZGluZ3MnIGZyb250IG1hdHRlciBrZXkgaXMgdXNlZCB0byBzdG9yZSBudW1iZXJpbmcgc2V0dGluZ3Mgc3BlY2lmaWMgdG8gdGhlIGZpbGUuIFRoZXJlIGFyZSBmb3VyIHBvc3NpYmxlIG9wdGlvbnNcclxuICAgICAgaW4gdGhlIHZhbHVlIHRvIHRoZSByaWdodCBvZiB0aGUgY29sb24sIHNlcGFyYXRlZCBieSBjb21tYXMuXHJcbiAgICBgXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnN0IHVsID0gY29udGFpbmVyRWwuY3JlYXRlRWwoJ3VsJywge30pXHJcblxyXG4gICAgY29uc3QgbGkwID0gdWwuY3JlYXRlRWwoJ2xpJywgeyB9KVxyXG4gICAgbGkwLmNyZWF0ZUVsKCdiJywgeyB0ZXh0OiAnQXV0b21hdGljIG51bWJlcmluZycgfSlcclxuICAgIGxpMC5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogJzogSWYgXFwnYXV0b1xcJyBhcHBlYXJzLCB0aGUgZG9jdW1lbnQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IG51bWJlcmVkLicgfSlcclxuXHJcbiAgICBjb25zdCBsaTEgPSB1bC5jcmVhdGVFbCgnbGknLCB7IH0pXHJcbiAgICBsaTEuY3JlYXRlRWwoJ2InLCB7IHRleHQ6ICdGaXJzdCBsZXZlbCB0byBudW1iZXInIH0pXHJcbiAgICBsaTEuY3JlYXRlRWwoJ3NwYW4nLCB7IHRleHQ6ICc6IElmIFxcJ2ZpcnN0LWxldmVsIDJcXCcgYXBwZWFycywgdGhlIG51bWJlcmluZyB3aWxsIHN0YXJ0IGF0IHRoZSBzZWNvbmQgbGV2ZWwnIH0pXHJcblxyXG4gICAgY29uc3QgbGkyID0gdWwuY3JlYXRlRWwoJ2xpJywgeyB9KVxyXG4gICAgbGkyLmNyZWF0ZUVsKCdiJywgeyB0ZXh0OiAnU3RhcnQgbnVtYmVyaW5nIGZpcnN0IGhlYWRpbmcgYXQnIH0pXHJcbiAgICBsaTIuY3JlYXRlRWwoJ3NwYW4nLCB7IHRleHQ6ICc6IElmIFxcJ3N0YXJ0LWF0IENcXCcgYXBwZWFycywgdGhlIG51bWJlcmluZyBvZiB0aGUgZmlyc3QgbGV2ZWwgd2lsbCBzdGFydCBhdCBDLCBpbnN0ZWFkIG9mIEEnIH0pXHJcblxyXG4gICAgY29uc3QgbGkzID0gdWwuY3JlYXRlRWwoJ2xpJywgeyB9KVxyXG4gICAgbGkzLmNyZWF0ZUVsKCdiJywgeyB0ZXh0OiAnTWF4aW11bSBsZXZlbCB0byBudW1iZXInIH0pXHJcbiAgICBsaTMuY3JlYXRlRWwoJ3NwYW4nLCB7IHRleHQ6ICc6IElmIFxcJ21heCA2XFwnIGFwcGVhcnMsIHRoZSBoZWFkaW5ncyBhYm92ZSBsZXZlbCA2IHdpbGwgYmUgc2tpcHBlZC4nIH0pXHJcblxyXG4gICAgY29uc3QgbGk0ID0gdWwuY3JlYXRlRWwoJ2xpJywgeyB9KVxyXG4gICAgbGk0LmNyZWF0ZUVsKCdiJywgeyB0ZXh0OiAnVGFibGUgb2YgY29udGVudHMgYW5jaG9yJyB9KVxyXG4gICAgbGk0LmNyZWF0ZUVsKCdzcGFuJywgeyB0ZXh0OiAnOiBJZiBcXCdjb250ZW50cyBedG9jXFwnIGFwcGVhcnMsIHRoZSBoZWFkaW5nIHRoYXQgZW5kcyB3aXRoIHRoZSBhbmNob3IgXnRvYyB3aWxsIGhhdmUgYSB0YWJsZSBvZiBjb250ZW50cyBpbnNlcnRlZCBiZW5lYXRoIGl0LicgfSlcclxuXHJcbiAgICBjb25zdCBsaTUgPSB1bC5jcmVhdGVFbCgnbGknLCB7IH0pXHJcbiAgICBsaTUuY3JlYXRlRWwoJ2InLCB7IHRleHQ6ICdOdW1iZXJpbmcgc3R5bGUnIH0pXHJcbiAgICBsaTUuY3JlYXRlRWwoJ3NwYW4nLCB7XHJcbiAgICAgIHRleHQ6IGA6XHJcbiAgICAgIEEgc3R5bGUgdGV4dCBsaWtlICcxLjEnLCAnQS4xJywgb3IgJ18uMS4xJyB0ZWxscyB0aGUgcGx1Z2luIGhvdyB0byBmb3JtYXQgdGhlIGhlYWRpbmdzLlxyXG4gICAgICBJZiBhIHN0eWxlIHN0cmluZyBlbmRzIHdpdGggJy4nIChhIGRvdCksICc6JyAoYSBjb2xvbiksICctJyAoYSBkYXNoKSwgb3IgJ+KAlCcgKGFuIGVtZGFzaCksIHRoZSBoZWFkaW5nIG51bWJlcnMgd2lsbCBiZSBzZXBhcmF0ZWQgZnJvbSB0aGUgaGVhZGluZyB0aXRsZVxyXG4gICAgICB3aXRoIHRoYXQgc3ltYm9sLmBcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgdWwzID0gbGk1LmNyZWF0ZUVsKCd1bCcsIHt9KVxyXG4gICAgdWwzLmNyZWF0ZUVsKCdsaScsIHtcclxuICAgICAgdGV4dDogYCAgICAgIFxyXG4gICAgICBGb3IgZXhhbXBsZSwgJzEuMScgbWVhbnMgYm90aCB0b3AgbGV2ZWwgYW5kIG90aGVyIGhlYWRpbmdzIHdpbGwgYmUgbnVtYmVyZWQgc3RhcnRpbmcgZnJvbSAnMScuXHJcbiAgICBgXHJcbiAgICB9KVxyXG4gICAgdWwzLmNyZWF0ZUVsKCdsaScsIHtcclxuICAgICAgdGV4dDogYCAgICAgIFxyXG4gICAgICBGb3IgZXhhbXBsZSwgJ0EuMScgbWVhbnMgdG9wIGxldmVsIGhlYWRpbmdzIHdpbGwgYmUgbnVtYmVyZWQgc3RhcnRpbmcgZnJvbSAnQScuXHJcbiAgICBgXHJcbiAgICB9KVxyXG4gICAgdWwzLmNyZWF0ZUVsKCdsaScsIHtcclxuICAgICAgdGV4dDogYCAgICAgIFxyXG4gICAgICBGb3IgZXhhbXBsZSwgJ18uQS4xJyBtZWFucyB0b3AgbGV2ZWwgaGVhZGluZ3Mgd2lsbCBOT1QgYmUgbnVtYmVyZWQsIGJ1dCB0aGUgbmV4dCBsZXZlbHMgd2lsbCBiZSBudW1iZXJlZCB3aXRoIGxldHRlcnMgYW5kIG51bWJlcnMuXHJcbiAgICBgXHJcbiAgICB9KVxyXG4gICAgdWwzLmNyZWF0ZUVsKCdsaScsIHtcclxuICAgICAgdGV4dDogYCAgICAgIFxyXG4gICAgICBGb3IgZXhhbXBsZSwgJzEuMTonIG1lYW5zIGhlYWRpbmdzIHdpbGwgbG9vayBsaWtlICcjIyAyLjQ6IEV4YW1wbGUgSGVhZGluZydcclxuICAgIGBcclxuICAgIH0pXHJcbiAgICB1bDMuY3JlYXRlRWwoJ2xpJywge1xyXG4gICAgICB0ZXh0OiBgICAgICAgXHJcbiAgICAgIEZvciBleGFtcGxlLCAnQS4xLScgbWVhbnMgaGVhZGluZ3Mgd2lsbCBsb29rIGxpa2UgJyMjIEIuNS0gRXhhbXBsZSBIZWFkaW5nJ1xyXG4gICAgYFxyXG4gICAgfSlcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ1NraXAgdG9wIGhlYWRpbmcgbGV2ZWwnKVxyXG4gICAgICAuc2V0RGVzYygnSWYgc2VsZWN0ZWQsIG51bWJlcmluZyB3aWxsIG5vdCBiZSBhcHBsaWVkIHRvIHRoZSB0b3AgaGVhZGluZyBsZXZlbC4nKVxyXG4gICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2tpcFRvcExldmVsKVxyXG4gICAgICAgIC5zZXRUb29sdGlwKCdTa2lwIHRvcCBoZWFkaW5nIGxldmVsJylcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5za2lwVG9wTGV2ZWwgPSB2YWx1ZVxyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuICAgICAgICB9KSlcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ0ZpcnN0IGhlYWRpbmcgbGV2ZWwnKVxyXG4gICAgICAuc2V0RGVzYygnRmlyc3QgaGVhZGluZyBsZXZlbCB0byBudW1iZXIuJylcclxuICAgICAgLmFkZFNsaWRlcihzbGlkZXIgPT4gc2xpZGVyXHJcbiAgICAgICAgLnNldExpbWl0cygxLCA2LCAxKVxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXJzdExldmVsKVxyXG4gICAgICAgIC5zZXREeW5hbWljVG9vbHRpcCgpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3RMZXZlbCA9IHZhbHVlXHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pKVxyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSgnU3RhcnQgbnVtYmVyaW5nIGF0JylcclxuICAgICAgLnNldERlc2MoJ1N0YXJ0IG51bWJlcmluZyB0aGUgZmlyc3QgaGVhZGluZyBsZXZlbCBmcm9tIHRoaXMgdmFsdWUuJylcclxuICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnN0YXJ0QXQpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc3RhcnRBdCA9IHZhbHVlXHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pKVxyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSgnTWF4aW11bSBoZWFkaW5nIGxldmVsJylcclxuICAgICAgLnNldERlc2MoJ01heGltdW0gaGVhZGluZyBsZXZlbCB0byBudW1iZXIuJylcclxuICAgICAgLmFkZFNsaWRlcihzbGlkZXIgPT4gc2xpZGVyXHJcbiAgICAgICAgLnNldExpbWl0cygxLCA2LCAxKVxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhMZXZlbClcclxuICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1heExldmVsID0gdmFsdWVcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgfSkpXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdTdHlsZSBmb3IgbGV2ZWwgMSBoZWFkaW5ncycpXHJcbiAgICAgIC5zZXREZXNjKCdEZWZpbmVzIHRoZSBudW1iZXJpbmcgc3R5bGUgZm9yIGxldmVsIG9uZSBoZWFkaW5ncy4gVmFsaWQgdmFsdWVzIGFyZSAxIChmb3IgbnVtYmVycykgb3IgQSAoZm9yIGNhcGl0YWwgbGV0dGVycykuJylcclxuICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnN0eWxlTGV2ZWwxKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnN0eWxlTGV2ZWwxID0gdmFsdWUgYXMgTnVtYmVyaW5nU3R5bGVcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgfSkpXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdTdHlsZSBmb3IgbG93ZXIgbGV2ZWwgaGVhZGluZ3MgKGJlbG93IGxldmVsIDEpJylcclxuICAgICAgLnNldERlc2MoJ0RlZmluZXMgdGhlIG51bWJlcmluZyBzdHlsZSBmb3IgaGVhZGluZ3MgYmVsb3cgbGV2ZWwgb25lLiBWYWxpZCB2YWx1ZXMgYXJlIDEgKGZvciBudW1iZXJzKSBvciBBIChmb3IgY2FwaXRhbCBsZXR0ZXJzKS4nKVxyXG4gICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3R5bGVMZXZlbE90aGVyKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnN0eWxlTGV2ZWxPdGhlciA9IHZhbHVlIGFzIE51bWJlcmluZ1N0eWxlXHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pKVxyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSgnQXV0b21hdGljIG51bWJlcmluZycpXHJcbiAgICAgIC5zZXREZXNjKCdUdXJucyBvbiBhdXRvbWF0aWMgbnVtYmVyaW5nIG9mIGRvY3VtZW50cy4nKVxyXG4gICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0bylcclxuICAgICAgICAuc2V0VG9vbHRpcCgnVHVybiBvbiBhdXRvbWF0aWMgbnVtYmVyaW5nJylcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvID0gdmFsdWVcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgfSkpXHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdTZXBhcmF0b3Igc3R5bGUnKVxyXG4gICAgICAuc2V0RGVzYygnRGVmaW5lcyB0aGUgc2VwYXJhdG9yIHN0eWxlIGJldHdlZW4gdGhlIGhlYWRpbmcgbnVtYmVyIGFuZCB0aGUgaGVhZGluZyB0ZXh0LiBWYWxpZCB2YWx1ZXMgYXJlIDogKGNvbG9uKSBvciAuIChkb3QpIG9yIC0gKGRhc2gpIG9yIOKAlCAoZW1kYXNoKS4gWW91IGNhbiBhbHNvIGxlYXZlIGl0IGJsYW5rIGZvciBubyBzZXBhcmF0b3IsIG9yIGhhdmUgYSBzcGFjZSBiZWZvcmUgdGhlIHNlcGFyYXRvci4nKVxyXG4gICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VwYXJhdG9yKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlcGFyYXRvciA9IHZhbHVlXHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG4gICAgICAgIH0pKVxyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZSgnVGFibGUgb2YgQ29udGVudHMgQW5jaG9yJylcclxuICAgICAgLnNldERlc2MoJ0FuY2hvciB3aGljaCBsYWJlbHMgdGhlIGhlYWRlciB3aGVyZSBhIHRhYmxlIG9mIGNvbnRlbnRzIHNob3VsZCBiZSBpbnNlcnRlZC4gVGhlIGFuY2hvciBzaG91bGQgYmUgYWRkZWQgYXQgdGhlIGVuZCBvZiBhIGhlYWRlci4gRm9yIGV4YW1wbGUsIF50b2MuJylcclxuICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRlbnRzKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRlbnRzID0gdmFsdWVcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcbiAgICAgICAgfSkpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdW1iZXJIZWFkaW5nc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgc2V0dGluZ3MhOiBOdW1iZXJIZWFkaW5nc1BsdWdpblNldHRpbmdzXHJcblxyXG4gIGFzeW5jIG9ubG9hZCAoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgY29uc29sZS5pbmZvKCdMb2FkaW5nIE51bWJlciBIZWFkaW5ncyBQbHVnaW4sIHZlcnNpb24gJyArIHRoaXMubWFuaWZlc3QudmVyc2lvbilcclxuXHJcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpXHJcblxyXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgaWQ6ICdudW1iZXItaGVhZGluZ3Mtd2l0aC1vcHRpb25zJyxcclxuICAgICAgbmFtZTogJ051bWJlciBhbGwgaGVhZGluZ3MgaW4gZG9jdW1lbnQgKGFuZCBzaG93IG9wdGlvbnMpJyxcclxuICAgICAgY2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgaWYgKGNoZWNraW5nKSByZXR1cm4gaXNWaWV3QWN0aXZlKHRoaXMuYXBwKVxyXG5cclxuICAgICAgICBjb25zdCB2aWV3SW5mbyA9IGdldFZpZXdJbmZvKHRoaXMuYXBwKVxyXG4gICAgICAgIGlmICh2aWV3SW5mbykge1xyXG4gICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRGcm9udE1hdHRlclNldHRpbmdzT3JBbHRlcm5hdGl2ZSh2aWV3SW5mby5kYXRhLCB0aGlzLnNldHRpbmdzKVxyXG4gICAgICAgICAgdXBkYXRlSGVhZGluZ051bWJlcmluZyh2aWV3SW5mbywgc2V0dGluZ3MpXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgLy8gSEFDSzogVGhpcyBtdXN0IGhhcHBlbiBhZnRlciBhIHRpbWVvdXQgc28gdGhhdCB0aGVyZSBpcyB0aW1lIGZvciB0aGUgZWRpdG9yIHRyYW5zYWN0aW9uIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgICAgIGNvbnN0IHBvc3ROdW1iZXJpbmdWaWV3SW5mbyA9IGdldFZpZXdJbmZvKHRoaXMuYXBwKVxyXG4gICAgICAgICAgICB1cGRhdGVUYWJsZU9mQ29udGVudHMocG9zdE51bWJlcmluZ1ZpZXdJbmZvLCBzZXR0aW5ncylcclxuICAgICAgICAgIH0sIDMwMDApXHJcblxyXG4gICAgICAgICAgc2hvd051bWJlcmluZ0RvbmVNZXNzYWdlKHRoaXMuYXBwLCBzZXR0aW5ncywgdmlld0luZm8pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogJ251bWJlci1oZWFkaW5ncycsXHJcbiAgICAgIG5hbWU6ICdOdW1iZXIgYWxsIGhlYWRpbmdzIGluIGRvY3VtZW50JyxcclxuICAgICAgY2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgaWYgKGNoZWNraW5nKSByZXR1cm4gaXNWaWV3QWN0aXZlKHRoaXMuYXBwKVxyXG5cclxuICAgICAgICBjb25zdCB2aWV3SW5mbyA9IGdldFZpZXdJbmZvKHRoaXMuYXBwKVxyXG4gICAgICAgIGlmICh2aWV3SW5mbykge1xyXG4gICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBnZXRGcm9udE1hdHRlclNldHRpbmdzT3JBbHRlcm5hdGl2ZSh2aWV3SW5mby5kYXRhLCB0aGlzLnNldHRpbmdzKVxyXG4gICAgICAgICAgdXBkYXRlSGVhZGluZ051bWJlcmluZyh2aWV3SW5mbywgc2V0dGluZ3MpXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgLy8gSEFDSzogVGhpcyBtdXN0IGhhcHBlbiBhZnRlciBhIHRpbWVvdXQgc28gdGhhdCB0aGVyZSBpcyB0aW1lIGZvciB0aGUgZWRpdG9yIHRyYW5zYWN0aW9uIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgICAgIGNvbnN0IHBvc3ROdW1iZXJpbmdWaWV3SW5mbyA9IGdldFZpZXdJbmZvKHRoaXMuYXBwKVxyXG4gICAgICAgICAgICB1cGRhdGVUYWJsZU9mQ29udGVudHMocG9zdE51bWJlcmluZ1ZpZXdJbmZvLCBzZXR0aW5ncylcclxuICAgICAgICAgIH0sIDMwMDApXHJcblxyXG4gICAgICAgICAgLy8gTk9URTogVGhlIGxpbmUgYmVsb3cgaXMgaW50ZW50aW9uYWxseSBjb21tZW50ZWQgb3V0LCBzaW5jZSB0aGlzIGNvbW1hbmQgaXMgdGhlIHNhbWUgYXNcclxuICAgICAgICAgIC8vICAgICAgIHRoZSBhYm92ZSBjb21tYW5kLCBleGNlcHQgZm9yIHRoaXMgbGluZVxyXG4gICAgICAgICAgLy8gc2hvd051bWJlcmluZ0RvbmVNZXNzYWdlKHRoaXMuYXBwLCBzZXR0aW5ncywgdmlld0luZm8pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogJ3JlbW92ZS1udW1iZXItaGVhZGluZ3MnLFxyXG4gICAgICBuYW1lOiAnUmVtb3ZlIG51bWJlcmluZyBmcm9tIGFsbCBoZWFkaW5ncyBpbiBkb2N1bWVudCcsXHJcbiAgICAgIGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmIChjaGVja2luZykgcmV0dXJuIGlzVmlld0FjdGl2ZSh0aGlzLmFwcClcclxuXHJcbiAgICAgICAgY29uc3Qgdmlld0luZm8gPSBnZXRWaWV3SW5mbyh0aGlzLmFwcClcclxuICAgICAgICByZW1vdmVIZWFkaW5nTnVtYmVyaW5nKHZpZXdJbmZvKVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiAnc2F2ZS1zZXR0aW5ncy10by1mcm9udC1tYXR0ZXInLFxyXG4gICAgICBuYW1lOiAnU2F2ZSBzZXR0aW5ncyB0byBmcm9udCBtYXR0ZXInLFxyXG4gICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAoY2hlY2tpbmcpIHJldHVybiBpc1ZpZXdBY3RpdmUodGhpcy5hcHApXHJcblxyXG4gICAgICAgIGNvbnN0IHZpZXdJbmZvID0gZ2V0Vmlld0luZm8odGhpcy5hcHApXHJcbiAgICAgICAgaWYgKHZpZXdJbmZvKSB7XHJcbiAgICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGdldEZyb250TWF0dGVyU2V0dGluZ3NPckFsdGVybmF0aXZlKHZpZXdJbmZvLmRhdGEsIHRoaXMuc2V0dGluZ3MpXHJcbiAgICAgICAgICBzYXZlU2V0dGluZ3NUb0Zyb250TWF0dGVyKHZpZXdJbmZvLmRhdGEsIHZpZXdJbmZvLmVkaXRvciwgc2V0dGluZ3MpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IE51bWJlckhlYWRpbmdzUGx1Z2luU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpXHJcblxyXG4gICAgdGhpcy5yZWdpc3RlckludGVydmFsKHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZpZXdJbmZvID0gZ2V0Vmlld0luZm8odGhpcy5hcHApXHJcbiAgICAgIGlmICh2aWV3SW5mbykge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0RnJvbnRNYXR0ZXJTZXR0aW5nc09yQWx0ZXJuYXRpdmUodmlld0luZm8uZGF0YSwgdGhpcy5zZXR0aW5ncylcclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmF1dG8pIHtcclxuICAgICAgICAgIHVwZGF0ZUhlYWRpbmdOdW1iZXJpbmcodmlld0luZm8sIHNldHRpbmdzKVxyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEhBQ0s6IFRoaXMgbXVzdCBoYXBwZW4gYWZ0ZXIgYSB0aW1lb3V0IHNvIHRoYXQgdGhlcmUgaXMgdGltZSBmb3IgdGhlIGVkaXRvciB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgICAgICBjb25zdCBwb3N0TnVtYmVyaW5nVmlld0luZm8gPSBnZXRWaWV3SW5mbyh0aGlzLmFwcClcclxuICAgICAgICAgICAgdXBkYXRlVGFibGVPZkNvbnRlbnRzKHBvc3ROdW1iZXJpbmdWaWV3SW5mbywgc2V0dGluZ3MpXHJcbiAgICAgICAgICB9LCAzMDAwKVxyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdOdW1iZXIgSGVhZGluZ3MgUGx1Z2luOiBBdXRvbWF0aWNhbGx5IG51bWJlcmVkIGRvY3VtZW50JylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIDEwICogMTAwMCkpXHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkU2V0dGluZ3MgKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSlcclxuICB9XHJcblxyXG4gIGFzeW5jIHNhdmVTZXR0aW5ncyAoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJNYXJrZG93blZpZXciLCJwYXJzZUZyb250TWF0dGVyRW50cnkiLCJNb2RhbCIsIlBsdWdpblNldHRpbmdUYWIiLCJTZXR0aW5nIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcs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
